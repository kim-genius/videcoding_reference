section4
2025.07.01 화 오후 12:48 ・ 108분 50초
김영재


참석자 1 00:00
교육 프로그램이에요. 하고 계시고 그러면은 기획자나 나머지 역에 손을 많이 들지 않아가지고 거의 대부분 개발자라는 걸 전제로 하고 진행하도록 하겠습니다.

참석자 1 00:15
네 방금 소개를 받았고요. 저는 포코라고 하는 회사에서 컨설턴트로 일을 하고 있습니다.
정확히는 이 회사가 이제 1인 법인이어 가지고 대표도 될 수 있고 영업 컨설턴트도 될 수 있고 하는데 이제 어디 가서 대표라고 그러면 괜히 영업하러 온 사람 같고 그래가지고 컨설턴트라는 직감을 사용하고 있고요.
이 회사 창업은 올해 2월달에 했습니다. 그전까지는 이제 작년 말까지 AWS에서 소프트웨어 개발자로 일을 했었고요.
AWS 안에서 한 번 역할을 바꿨어요. 소프트웨어 개발자 하기 전에는 이제 테크니컬 트레이너라고 하는 업무를 했었습니다.
그래서 it 강사예요. 그래서 AWS를 가르쳐드리는 일을 했었고 개발 관련해서는 거진 한 30년 정도 일을 해온 것 같습니다.

참석자 1 01:03
95년도에 이제 돈 받고 제가 최초로 일한 거는 88올림픽까지 거슬러 올라가는데 제가 이제 동네 컴퓨터 학원에서 코골로 그때 원장 선생님이 아마 이제 LG전자 그때는 이제 금성이 삼성전자 관련된 데에서 막 퇴직하신 분이어 가지고 나 88올림픽 기념주화를 이제 발송을 해야 되는데 그 발송하는 라벨지를 프린트하는 걸 코골로 만들었었어요.
그게 이제 제가 기억하기로는 아무튼 초등학교 5학년인가 6학년인가 그랬었는데 이제 본격적으로 좀 월급 받으면서 일한 거는 95년도에 SDS 유니텔 사업부에서 일을 시작을 했습니다.
그 뒤로 쭉 어쨌든지 개발 관련된 일을 계속해오고 있고요.
벌써 한 10년 됐는데 팟캐스트 나눔 프로그래머가 해서 이제 정개발이라는 닉네임으로 활동을 했었습니다.
혹시 나눔 프로그래머가 들어보신 분 계신가요? 네 잘 많이 없으시죠?
벌써 한 10년 돼가지고 이 로봇 코라는 회사에 대해서 잠깐 좀 소개를 드리면요.

참석자 1 02:15
저희 이제 캐치 프라이즈가 바쁜 여러분 대신 공부해 드립니다라고 하는 캐치 프레이즈를 있고요.
아까 저희라고 소개해 드렸는데 사실 저 말고도 멤버가 몇 명 더 있습니다.
풀 타임으로 일을 하지 않아서 그런지 이제 저는 이제 아마존 출신이고 그다음에 또 한 명 이제 시니어 개발자가 있는데 이분은 한 구글에서 10년 넘게 일을 하신 분이십니다.
지금 미국에 계시고요. 프로덕션 레벨의 다이브 코딩을 컨설팅하고 교육하는 걸 메인 비즈니스로 하고 있습니다.
원래는 클라우드 인프라 쪽 제가 이제 백그라운드를 가지고 있어가지고 그쪽을 좀 컨설팅을 하려고 했었는데 그쪽은 일거리가 많이 안 들어오고 요즘은 이제 바이브 코딩 쪽으로 일이 많이 들어오고 있습니다.
대부분 컨설팅이라고 하면은 이제 서류 왕창 만들어주고 던져주고 가는 경우가 많은데 저희는 실전 경험 기반으로 현장에서 사용할 수 있는 솔루션을 제공을 해드리고 있고요.

참석자 1 03:09
로보코에서 최근 바이프 코딩으로 진행한 작업들을 소개해 드리면 다음과 같은 것들을 진행을 했습니다.
우선 이제 플랫폼 엔지니어링인데 기존 인프라 환경에 대해서 테스트 하드 검증을 자동으로 생성을 했어요.
그래서 이제 서버 리스 클라우드 플랫폼으로 이제 이전하는 작업을 했었고요.
그다음에 보안 리뷰도 진행을 했습니다. isms에 대한 이제 심사를 받고 싶다라는 고객분에 가지고 기존 아키텍처를 문서화하고 취약점 분석하고 그 취약점 분석 결과에 따라서 이제 보안 계획 수립하고 체크리스트 작성하고 isms 규정에 대한 이제 매핑 테이블 같은 것들을 작성하는 작업을 했고요.
그리고 아키텍처에 대한 이제 개선 작업도 진행을 했습니다.
그래서 현황 분석 계획 수립 마이그레이션 수립 그다음에 파이프라인 구축까지 수행을 했고 그리고 기존 모더리식 서비스를 이제 마이크로 서비스로 마이그레이션 하는 수행을 했는데 그것도 앞쪽하고 비슷해요.

참석자 1 04:06
그래서 이거는 이제 좀 재미난 게 기존 모노리싱 시스템에 ER 다이어그램을 리버스 엔지니어링으로 뽑은 다음에 그걸 AI한테 던져주고 이 안에서 마이크로 서비스로 뺄 수 있는 후보군들을 찾아달라고 이제 바운더리 서비스 바운더리를 찾아달라고 해서 이제 그걸 기반으로 해서 마이크로 서비스 후보군들을 탐색하고 이제 API나 데이터 스키마를 자동 생성하는 것까지 수행을 했고요.
그다음에 교육 관련 작업들도 많이 했습니다. 이제 와이프 코딩 관련해서 데모 프로젝트들도 6개라고 돼 있는데 지금은 한 10개가 넘고요.
교환도 작성하고 책도 쓰고 교육도 만들고 해가지고 오늘 여러분들 교육 부폰들 다 받으셨을 텐데 제가 지금 한빈 미디어에서 교육을 론칭을 했습니다.

참석자 1 04:52
그래서 한 매니저 한빈 에저 교육을 론칭을 해가지고 그 교육은 그냥 한 번 다 들으시고 끝나는 게 아니라 아이고 코딩 기술이 계속 변하잖아요.
그래가지고 분기별로 계속 업데이트가 됩니다. 그때그때 가장 최신의 툴을 사용하는 방식으로 해서 꾸준히 업데이트가 될 예정이다.
여기 있는 작업들 다 6개월 안에 한 건데 거의 대부분이 2주 안에 끝났어요.
여러분들 가지고 있는 상식적인 개념으로 봤을 때는 2주 안에 끝날 수 있는 작업인가요?
물론 이제 프로젝트 규모에 따라서 다르겠지만 사실 그렇게 빨리 끝나기는 쉽지 않을 겁니다.
그만큼 이제 압도적인 생산력을 가지고 있다라고 하는 게 바이 코리의 큰 장점이고요.
그래서 오늘 주제는 그냥 바이크 코딩 많이들 이제 퍼서나 이런 툴을 써보면서 얘가 코드도 짜주네.
되게 신기하다. 그 정도는 써보셨을 텐데 업무에서 사용하기 위해서 어떤 점들을 고려해야 되는지를 갖다가 좀 집중적으로 살펴보도록 하겠습니다.

참석자 1 06:00
원래는 라이브 데모를 좀 많이 할까 했는데 여기 지금 네트워크 사정도 그도 용의치 않고 그래가지고 가능하면은 QnA를 좀 많이 진행하도록 할게요.
궁금하신 점들이 있으면은 다 물어보고 가실 수 있도록 그렇게 좀 안내를 하도록 하겠습니다.
원래 이 바이브 코딩이라고 하는 거는 이제 비교적 최근에 많이 알려지긴 했지만 원래부터 있던 용어였더라고요.
원래는 약간 무계획으로 충동적으로 하는 개발을 말하는 겁니다.
개발자분들 그런 케이스가 많이들 있으실 텐데 설계하고 리뷰 받고 이렇게 해서 개발한 게 아니라 어느 날 내가 이거 좀 좀 불편한데 대부분 스크립트성이죠.
이거 불편한데 이거 만들면 좀 편할 것 같아 예를 들면 필요 없는 파일을 지우는 스크립트라든지 그래가지고 그런 걸 갖다가 생각이 들었던 것 같아요.
막 작업을 했습니다.

참석자 1 06:56
그래가지고 딱 돌렸더니 웬 걸 디버그 없이 한 번에 깔끔하게 딱 내가 원하는 대로 돌아가 이제 이런 식으로 이제 한국어로 표현하자면은 한국식으로 표현하면 약간 어키비키 코딩 같은 그런 느낌이죠.
그래서 이거 잘 됐네. 그거를 지칭하는 게 다리 코딩이고 이게 나쁜 의미도 있습니다.
그런 식으로 작업했더니 안 돌아가 나중에 디버깅이 더 오히려 배보다 배꼽이 더 커져 그런 어떤 약간 무게의 힘으로 개발하는 것을 비꼬는 이제 민 용어이기는 했었어요.
근데 이거를 갖다가 2025년에 이제 오픈ai 창업 멤버이자 테슬라 i의 디렉터인 AI 연구자 안드레 캠퍼 씨가 x에 올린 포스트에서 야 내가 요즘에 자연 언어로 코딩을 AI 때 짜라고 했더니 그러면 걔가 어떻게 하는지만 지켜보고 나는 약간 디렉션 방향만 가르켜줬더니 되게 잘 짜더라 이거를 바이브 코딩이라고 부르자 했는데 그 직전에 엔트로픽이라는 회사에서 에이전트 코딩이라고 하는 용어를 막 밀고 있었습니다.

참석자 1 08:02
근데 사람들이 야 이 바이브 코딩 입에 쫙쫙 달라붙는데 그 그냥 20 올해 2월이죠.
2월에 발급 코딩이라는 용어가 확 돌고 나서 그냥 그게 돼버렸어요.
아직도 몇몇 사람들은 에이저티 코딩이라는 용어를 사용하고 있긴 하지만 어쨌든 이제 메인 스트림은 바이브 코딩으로 넘어갔다.
왜 지금 바이 코딩을 시작해야 하는가라고 한다면은 압도적인 생산성입니다.
지금도 생산성이 충분히 좋은데 심지어 더 좋아지고 있어요.
예 저는 조만간 이 미래라고 그랬는데 멀지 않은 미래에 보편적인 개발 방식으로 자리 잡을 가능성이 크다고 생각을 하고요.
소규모의 인원으로 대규모의 개발이 가능해지는 시점이 됐다고 생각을 합니다.
커뮤니케이션 비용이 굉장히 중요한데 단순하게 빠르게 개발할 수 있다.
대규모의 개발할 수 있다. 이것뿐만이 아니라 안정적인 품질도 보장이 돼요.

참석자 1 09:05
왜냐하면은 소인원의 개발에 있을 때 되게 크게 좌우되는 측면이 핵심 개발자가 빠져나가면은 그 프로젝트가 갑자기 바람 맞은 풍선처럼 확 줄어드는 경우가 있거든요.
막 새로운 피처도 릴리즈가 안 고 이거는 그럴 가능성이 별로 없습니다.
왜냐하면은 품질을 AI가 보여준을 했기 때문에 AI가 프로세스가 보증에는 측면이다.
옆에 있는 요 지금 기업들 커서나 볼트, 런버블 그다음에 미드 제니 이런 회사들은 다 외부에 공개적으로 자신들은 아이코 보딩을 사용해서 개발을 하고 있다라고 알려져 있는 회사들이고요.
개발팀이 10명에서 20명 사이입니다. 그런데 이제 조 단위의 기업 가치를 인정받고 있는 팀들이고 결정적으로 이 회사들이 선점 효과를 등에 업고 뭘 잘하고 그런 게 아니에요.
원래 그 시장에는 압도적인 강자들이 있었고 대부분 다 대기업들입니다.
구글 ms 커서가 상대하고 있는 회사들만 나두 다 어디에요?
인테리 그다음에 웹스 비주얼 제품을 만들고 이런 회사들하고 경쟁해가지고 이겨나갑니다.

참석자 1 10:19
그것도 꽤 큰 스코어로 이겨나가고 있고요. 볼트도 마찬가지고 러버블이나 저기 이런 회사들도 다 경쟁회사들이 굉장히 큰 글로벌 회사들입니다.
근데 그 회사들하고 싸워서 이기고 있는 이게 포인트입니다.
왜 이게 가능한가 일단 이 바이코닝을 사용함으로써 이론상으로는 수십 배의 생산성 향상도 가능합니다.
근데 아직까지는 완벽하게 자동화가 되지는 않기 때문에 제가 봤을 때는 10배 정도가 현실적인 목표치라고 생각을 하고요.
근데 품질은 왜 좋아지는가 사람한테 의존하는 부분이 많이 줄어들기 때문에 그래요.
무슨 얘기냐면은 품질 관련된 부분을 상당 부분 자동화시킬 수 있습니다.
이따가 제가 몇 가지 좀 자료랑 함께 보여드릴 텐데 여기 지금 요 화면 있죠?
요 화면이 바이브 코딩을 병렬로 실행해서 개발하고 있는 개발자가 자기의 화면을 트위터에 올리는 이거예요.
이거 보신 분 계세요? 혹시 이 사진 거의 없으신 분 손을 들 하는데 여기에 이제 작은 창들이 하락하면서 글자들이 올라갑니다.

참석자 1 11:30
글자들이 올라가고 있는데 이제 클로드 코드를 사용하고 있고요.
인스턴스를 한 16개 정도 띄워가지고 작업을 시키고 있는 걸 볼 수가 있습니다.
완벽하게 자동화가 가능해진다면은 이런 방식의 개발도 가능해진다.
소이론으로 대규모 개발하는 게 이게 왜 좋은가라고 하는 부분을 좀 말씀드리려고 하는데 일단 커뮤니케이션 비용을 우리가 생각을 해야 됩니다.
코딩 많이 해주는 물론 AI가 여러 가지 작업들을 대체해 주는 것까지는 이해가 되실 텐데 커뮤니케이션 비용에 있어서 절대적인 우위를 가질 수가 있어요.
커뮤니케이션 비용에 대한 산출 공식은 사람이 혼자서 개발할 때는 커뮤니케이션 비용이 제로입니다.
내 머릿속에 다 있으니까 2명이서 개발할 때 선이 하나가 돼 1입니다.
3명이서 개발할 때 선 3개, 4명은 6개 이렇게 해가지고 2에 n 마이너스 1 곱한 거를 나누기 2 한 게 커뮤니케이션 비용 산출 공식이 되는데요.
모든 점을 입는 선의 개수가 되겠습니다.

참석자 1 12:32
기하급수적으로 증가한다는 얘기예요. 그래서 소인원으로 대규모의 개발을 했을 때 그만큼 얻는 이득이 크다.
이제 바이콘이 어느 정도 완성이 되고 사람의 개입 없이 모든 개발이 가능하게 지면은 저는 그 시점에서 특이점이 발생할 거라고 생각을 합니다.
더 이상 코드는 그 시점에서 자산이 아니고 부채로서 다루해지는 거예요.
기존에 돌고 있는 모든 코드들은 전부 내 것입니다.
우리들은 그때그때 필요한 소프트웨어를 요건만 딱 얘기하면은 그 시점에 가장 좋은 기술과 가장 좋은 인프라를 사용한 걸로 가장 정확한 걸로 저희한테 만들어서 제공을 해 주실 수 있게 될 거예요.
그때그때 요청에 의해서 온디맨드로 만들어지는 존재가 될 것이다.
소프트웨어가 개발자가 그러면 없어질까요? 저는 그렇지는 않을 것 같아요.
하지만 준비하지 않은 개발자는 없어질 가능성이 크겠죠.
코딩이라는 행위는 어쨌든 없어질 가능성이 굉장히 높다고 생각을 하고요.
이거는 역사적으로 여러 번 증명이 돼 왔었어요.

참석자 1 13:39
엄청 멀리 올라가면은 예를 들면 이런 거예요. 진화론을 믿지 않는 분도 계시겠지만은 그 먼 옛날에 이제 인류가 지구상에 이렇게 나왔을 때 아마 이제 인류의 조상들은 원숭이들이 이제 그런 얘기를 했었어.
요즘 원숭이들은 나무를 못하면 큰일이야. 애들 나무를 못하면 어쩌려고 그러냐 그래 근데 이제 인간이 그거 약간 비유인데 가까이 오자면은 어셈블리 언어라고 하는 되게 로 레벨 언어가 있습니다.
지금 쓰자면 엄청 까다롭고 복잡한 언어인데 이 언어를 이렇게 만드신 분이 이제 캐슬릭 교수인데 이분이 이제 자기 지도 교수가 폰노이만이었었어요.
교수님 제가 이런 거 만들었어요. 그전까지 다 기계로 코딩하고 있었거든요.

참석자 1 14:21
1년이 그래가지고 어셈블리어 만들어서 가져가서 칭찬받으려고 하고 손놀을 많이 막 노발대발하는 이딴 거 하드웨어 장비라고 기계였을이 왜 이런 거 만들어 가지고 쓸데없이 하드웨어를 만들 거냐 했던 게 불과 몇십 년 전이고 그래서 지금 야 효능은 어쨌든 살아남지 않겠냐 이게 AI가 다 해줄 리가 없다 보는데 그거는 이제 고정관념의 차이라고 저는 생각을 합니다.
바이브 코딩이 다 장점만 있는 건 아니에요. 단점이 있습니다.
현 시점에서의 단점 우선 AI가 일반적으로 장황하고 복잡하게 코드를 짜려는 습성이 있어요.
이 습성은 어디에서 온 거냐 사람한테서 배운 겁니다.
얘가 이제 기존 많이 짜여져 있는 비터 같은 데 올라와 있는 코드를 보고선 학습 학습하다 보니까 그런 경향이 있고요.

참석자 1 15:14
그래서 어떤 경우에는 그리고 어떤 경우에는 얘가 하드 코딩이나 예외 처리를 통해서 원래는 이게 어떤 예외가 발생하면은 실패하면은 그냥 거기서 에러대고 끝내야 되는데 예외 처리를 통해서 그 실패를 막아버렸고 하드 코딩으로 집어넣어서 통과시키는 일도 서슴지 않아요.
이런 AI의 좀 난폭한 무지성적인 부분을 우리가 컨트롤 할 수 있어야 됩니다.
그다음에 처리할 수 있는 컨텍스트 량에 제한이 있어요.
이거는 이제 모델 자체의 한계입니다. 근데 현재 이 모델이 처리할 수 있는 컨테스트 양이 굉장히 빠르게 늘고 있다.
근데 얼마나 될지 모르겠지만은 우리가 원하는 만큼 충분하지는 않을 수도 있다 고요.
그리고 컨텍트 양이 많아지면 많아질수록 비용이 많이 발생을 합니다.
여기에 이제 최신 버전을 얘가 잘 쓰지 않아요.

참석자 1 16:08
학습한 자기가 보고 학습한 게 1~2년 전 코드다 보니까 그 시점에 많이 작성됐던 그러니까 사실은 1~2년 전에 작성됐던 코드들은 그거보다 더 이전 버전에 아키텍처나 라이브러리들을 사용을 하겠죠.
그러니까 실제로 꽤 전에 솔루션들을 갖다가 선호하는 그런 경향이 있습니다.
여기에 이제 장기적으로 바이브 코딩 사용하면 어떤 사람에게 영향을 끼칠까 요 핸드폰이 이제 노이즈 캔슬링 핸드폰인데 MW 75 25라고 그래가지고 가격이 엄청 비쌉니다.
한 700불 정도 하니까 지금 환율로 하면 거의 한 100만 원도 하겠네요.
이게 이제 노이즈 캔슬링만 되는 게 아니라 귀 뒤쪽에 뇌파 센서가 달려 있어 가지고 이걸 끼고 작업을 하게 되면은 내가 얼마만큼 집중력을 발휘하면서 작업을 하고 있는지 알 수가 있습니다.
앱으로 추적이 가능해요.

참석자 1 17:04
그래서 요 두 개의 그래프가 있는데 파란색 쭉 올라가 있는 거 있죠 이거는 이제 둘 다 한 20년 정도 이상 현업에서 일하고 있는 좀 어느 정도 제가 봤을 때는 단일의 경제 연구 개발자가 작업을 약간 난이도가 있는 작업을 진행을 한 거고요.
이쪽은 센코딩도 아니고 코파일럿을 사용을 해가지고 약간 반자동 형식으로 개발을 한 겁니다.
개발했을 때 1시간 반 정도 꾸준히 높은 수준의 집중력이 유지되고 있다.
거의 99% 정도 1시간 반 정도 유지가 되고 있는 거.
사실 이 정도 집중력을 유지하면서 쭉 코딩을 코드를 생성할 수 있는 거는 상당히 약간 숙달되고 그러니까 되게 훈련된 개발자가 아니면은 어려워요.
이쪽은 상대적으로 좀 측정할 시간은 짧긴 하지만은 전체적으로 다 해가지고 한 한 40분 정도 시간인데 이쪽 같은 경우에는 바이브 코딩으로 작업했을 때 측정된 내파입니다.
구체적으로 말씀드린 윈드 서퍼 가지고 작업을 했고 앞쪽에 좀 높게 나타나죠.
그거 이제 기획 설계하는 단계예요.

참석자 1 18:18
그쪽에서만 사람이 좀 머리를 많이 쓰고 이후로는 중간이나 아니면 낮은 정도 수준의 집중력을 가지고도 문제없이 진행이 되고 있는 거고 중간중간 갑자기 이렇게 집중력이 높게 올라가는 부분 있죠 이거 이제 디버깅 같은 거다.
디버깅 같은 할 때 아니면 방향성이 잘못 돼가지고 디렉션을 다시 잡아줄 때 그때 발생하는

참석자 2 18:43
일을 쉽게 안 해

참석자 1 18:45
그래프고요. 그래서 여러분들 CPU가 좀 남아 놀면은 무슨 일을 하죠?
그러니까 하이퍼스트 레벨 같은 프로세스를 하나 더 어렸죠.
그래서 이것도 이제 실험을 해봤어요. 바이브 코딩을 화면에다가 여러 개를 띄워놓고 복수의 프로젝트를 동시에 한번 해봤습니다.
그래프가 크게 달라지지 않아요. 한 4개까지 뛰어놔도 이 그래프랑 거의 차이가 없더라.

참석자 1 19:18
이제 본격적으로 바이브 코딩이 프로덕션 레벨에서 실패하는 이유에 대해서 한번 살펴보려고 합니다.
우선 첫 번째는요. 레벨링에 맞는 도구와 프로세스를 사용하지 않기 때문이에요.
다양한 프로세스와 도구가 쏟아져 나오고 있지만은 이를 적절하게 활용할 수 있는 경험자가 절대 부족한 상황입니다.
그래서 이제 SNS 같은 데 보면은 내가 간단한 건 시켜봤는데 얘가 잡았는데 조금만 복잡해져도 버그 만들고 그래서 내가 직접 사는 게 낫겠다 이런 글 읽어보신 분 계세요 아직은 AI가 안 될 것 같다 없으신가요?
SNS 네

참석자 1 20:07
누군가가 말씀을 하시게 그래서 얘기를 까먹었네요.
제대로 된 방법을 쓰지 않으면은 AI가 모든 걸 다 자동으로 해주지는 않는다라는 거예요.
그리고 많은 분들이 이걸 간과하고 있는데 바이브 코딩이 될 수 있는 생산성이 사람에 많이 좌우됩니다.
저는 그걸 이제 공식으로 표현을 했는데요. x는 이제 p는 전체 총 생산성이고요.
프로덕티미티 x는 개발자가 될 수 있는 생산성 그리고 y는 툴과 프로세스가 될 수 있는 생산성입니다.
이 두 개가 곱해진 거에다가 순수하게 AI가 될 수 있는 생산성 제트가 더해진 게 바이크 코딩이 될 수 있는 생산성이고요.
이게 의미하는 거는 사람이 온전하게 자기 몫의 일을 하지 않는다.
아니면은 개발자가 아닌 사람이 썼을 때에는 그렇게 폭발적인 생산성을 기대하기 어렵다는 거예요.
제트만 가지고 생산성을 내야 된다. 만약에 개발자가 0일 경우는요.

참석자 1 21:20
그리고 개발자가 충분히 생산성을 낼 수 있는 1 이상의 값을 가진 사람임에도 불구하고 툴이나 프로세스가 제대로 갖춰지지 않으면은 마찬가지로 생산성이 떨어지게 된다.
그 부분을 강조하고 싶어서 이거 공식을 만들었고요.
제값은 현재로서는 되게 제한적이기는 한데 점점점점 빠르게 늘어나고 있습니다.
그래서 머지않은 미래에 어느 정도의 교육만 받으면은 어떤 프로그래밍 문법 같은 걸 잘 모른다 하더라도 충분히 개발을 할 수 있는 시대가 열리지 않을까 뭐 그게 언제가 될지는 모르겠습니다.
근데 이제 바비 코딩이라고 해서 다 같은 바이브 코딩은 아니라는 거죠.
아까 기대치에 대한 부분도 잠깐 언급을 했는데 이제 기대치가 다르고 실제 기대치에 맞춰서 내가 거기에 맞는 툴링이나 프로세스를 사용하는가가 중요한데 그 부분이 많이 차이가 있더라고요.
그래서 이제 제가 바이브 코딩에 대해 가지고 바이브 코딩 척도라는 걸 만들었습니다.
그래서 레벨 1부터 레벨 5까지 있고요.

참석자 1 22:29
레벨 1은 이제 코파일럿이 작성해 주는 함수 단위의 자동 완성 정도 레벨 2는 아까 말씀드렸던 스크립트 하나 정도 AI가 만들어주는 정도 레벨 3부터는 레벨 1 2는 좀 사람이 어느 정도 디렉션을 잡아주고 거기에 대해서 AI가 약간 타이핑을 줄여주는 정도였다고 한다면은 레벨 3 4는 AI가 설계에도 관여를 합니다.
심지어 레벨 4는요 아예 프로젝트 수준의 관리를 진행을 하는데 설계나 리팩터링 테스트 배포 그다음에 프로젝트 관리까지도 AI가 해줄 수 있는 수준을 레벨 4라고 얘기를 하고요.
오늘 이 강연에서 포커싱하고 있는 부분은 이 레벨 4 프로젝트 수준 관리 개발을 얘기를 합니다.

참석자 1 23:18
레벨 파이브는 아직 이제 인류가 도달하지 못한 영역인데 말 그대로 AI한테 야 우리 비즈니스 이런 거니까 너가 너 이거에 필요로 하는 걸 다 만들어줘라고 하면 AI가 이제 뚝딱뚝딱 만들어주는 시대가 언젠가는 올 것이다.
아마 약간 강 인공지능에 가까운 그런 것들이 이제 등장했을 때 이런 것들이 가능하지 않을까 싶습니다.
또 한 가지 바이크 코딩에 실패하는 이유는 공부 부족이라는 겁니다.
기본 이제 바이크 코딩을 시도하는 개발자분들이 본인은 개발자로서 충분한 역량과 경험이 있다고 생각을 하더라도 사실 소프트웨어 개발에 대한 지식에 더해서 아이고 코딩 그 자체에 대한 지식이나 경험도 필요합니다.
도구도 중요하고요. 모델도 중요하고 프로포트 엔지니어링도 배워야 되고 MCP와 같은 여러 가지 툴링에 대해서도 잘 파악을 하고 있어야 됩니다.
그러니까 배울 게 은근히 있어요. 특히 모델 선택이 굉장히 중요한데 바이브 코딩 선패를 좌우하는 데 있어서 가장 중요한 영역입니다.

참석자 1 24:24
저는 바이브 코딩 얘기할 때 뭔가 벤치마크 점수 얘기 꺼내면은 이 사람은 많이 안 해본 가 보다 그렇게 생각을 해요.
벤치마크 점수랑 실제 얘가 코드를 짜낼 수 있는 능력이나 그렇게 상관관계가 좋지가 않습니다.
상위권에 어느 정도 있는 그러니까 벤치마크에 올라와 있는 애들이라 도면은 코드를 작성하는 능력 그 자체는 그렇게까지 큰 차이가 없습니다.
근데 다만 개발해서 코드 짜는 게 다는 아니잖아요.
심지어는 그렇게 많지는 않아요. 개발자분들은 아시겠지만은 코드 짜고 앉아 있는 시간은 전체 회사에서 일하는 시간에 한 10% 20% 많이 자는 거 그 정도 아닐까요?
나머지 다 회의하고 요건 정의하고 디버깅하고 테스트하고 이런 요구입니다.
현 시점에서 이런 개발에 관련된 모든 공정을 이해하고 잘 작동할 수 있는 거는 클로드 4 계열이 가장 우수합니다.

참석자 1 25:26
크게 현재 시장에 나와 있는 건 클로드 4 그다음에 GPT 계열이 있고 그리고 얼마 전에 구글에서 이제 발표한 제미나이 정도가 있는데 제미나이는 초창기부터 여러 가지 테스트를 꾸준히 해왔는데 제가 봤을 때는 거의 100% 구글에서 자체적으로 내부에서 사용하고 있는 모델은 아닌 것 같아요.
외부에 공개하고 있는 거 너무 못해요. 일을 그래서 여기서는 그냥 비교과로 뺐고요.
일단 GPT 계열 같은 경우는 1년에서 2년 전 사이에 비터 포스 코드들로 학습이 되어져 있습니다.
다음 코드가 어떻게 작성될지를 예측하도록 훈련이 돼 있고요.
GPT 4.1 같은 경우에는 그래도 꽤 좋은 특징들을 많이 가지고 있어요.
대표적인 게 이제 규칙 같은 걸 열심히 지키려고 노력하는 그런 특징을 가지고 있습니다.
클로드 계열이 가장 좋다고 말씀드렸는데 클로드는 엔트로픽이라는 회사에서 만드는 도구고요.
선별된 소스 코드와 그리고 자사 앱 개발자들의 PC에 뭔 짓을 한 것 같아요.

참석자 1 26:33
저는 그거 이제 트레이터라고 생각을 하는데 자사 개발자들이 뭘 하는지를 관찰할 수 있는 뭔가 에이전트 같은 거 심어놓은 것 같습니다.
이거는 이제 클라우드의 이제 모델 개발에 관련된 페이퍼를 갖다가 읽어보면은 거기에 나와 있는데 그래서 아까 GPT 계열이 다음에 어떤 코드가 작성되는지를 예측하도록 훈련이 있다라고 그러면은 한다면은 클로드는 개발자가 다음에 어떤 행동을 할지를 예측하도록 훈련이 돼 있어요.
거기에 플러스해서 CLI 도구라든지 MCP 도구 같은 것들도 상당히 잘 사용을 합니다.
도구 사용에 있어서도 굉장히 능숙하다. 즉 이 말은 개발 관련 전체에 대한 이해도가 상당히 높은 모델이라는 얘기예요.

참석자 1 27:28
그래서 아까 말씀드린 것처럼 실제 레벨 4 실무에서 사용할 수 있을 정도의 프로젝트 관리 수준의 바이 코딩을 구현하기 위한 과정들은 어떤 게 있을까?
제가 이 강연에서 목표로 하고 있는 거 그리고 로봇 코에서 목표로 하고 있는 게 이제 프로젝트 수준 관리 실무에서 사용할 수 있는 수준의 발표 코드이라고 말씀드렸는데요.
일단 넘어야 될 산 중에 첫 번째가 이게 너무 새로운 분야다 보니까 아직 만들어진 게 불과 반년밖에 안 됐어요.
적립된 프로세스가 아직 없습니다. 참고할 수 있는 사례도 많지 않고 그래서 제가 이거 관련해서 여러 군데 미팅을 가보면은 많이 듣는 말이 이 말이에요.
동종업계의 국내에 성공 사례가 있는 그래서 제가 다 대답을 해 준 거예요.
동종업계의 국내 성공 사례를 보는 순간 여러분들의 비즈니스는 끝장 나는 다 그 회사 이길 수가 없다.
해외는 많죠.

참석자 1 28:32
아까 소개시켜드린 바이브 코딩 을 실제 작성하고 사용하고 있는 회사들도 있고 구글도 지금 바이크 코딩 엄청 도입하고 있다라고 하고 있고요.
아마 빅테크 중에서는 지금 발급 코딩 도입을 안 하는 회사가 없는 걸로 알고 있습니다.
근데 이것도 회사 안에서는 자기들이 잘 모르니까 반대할 구신만 찾는 사람들이 굉장히 많아요.
그 사람들이 회사에 있어서 얼마나 무서운 사람이 되는지를 갖다가 아직 사람들이 잘 모르고 있죠.
최소한 바깥 세상에서 무슨 일이 벌어지고 있는지는 알고 있어야 되겠다.
현 시점에서 어떤 도구가 제일 좋을까라고 한다면은 저는 이제 아르빈 로라머라고 하는 사람이 쓴 에이전트 코딩 티 포맨데이전트라고 하는 블로그 글을 꼭 읽어볼 것을 추천을 드립니다.
여러 번 들어 같아요.

참석자 1 29:26
여러 가지고 이분이 이제 블로그도 하시고 유튜브도 하시는데 누구냐 하면은 트라스트라고 하는 파이썬 트레이너 없겠죠 그거 만드신 분이에요.
근데 현재 제가 봤을 때는 이분의 작업 방식이라든지 툴링이 아이코 코딩계에서는 원탑이라고 생각을 합니다.
되게 깜짝 놀랐는데 이분 블로그 보고 제가 생각하는 거랑 방향성이랑 하고 있는 것들이 상당히 일치를 하는데 저보다 몇 발자국은 이제 앞서 나가고 계시더라고요.
굉장히 충격을 받았었는데 어쨌든 현 시점에서는 클로드 코드가 압도적인 원탑이에요.
커서나 리드 서프 이런 애들보다 훨씬 잘 동작합니다.
어느 정도 잘 동작하냐면은 아예 규칙만 잘 만들어 놓으면은 개발을 처음부터 어느 정도 수준이 있는 예를 들면은 블로그 같은 거 플랫폼 만드는 거 있잖아요.

참석자 1 30:18
댓글이라든지 태딩하는 기능 같은 것들까지 포함된 이제 리얼 월드라고 하는 애플리케이션이 있는데 그 애플리케이션을 처음부터 끝까지 사람의 개입 없이 혼자서 완성시킬 수 있는 정도 수준을 코딩 개발 능력을 보여줍니다.
프로드 코드 같은 경우 이 엔트로픽에서 실제로 자신들이 사용하려고 만든 코드이고요.
그 도구이고요. CLI 도구인데 왜 CLI로 만들었냐면은 자사 엔지니어들의 개발 환경이 보니까 다 틀리다는 거예요.
어떤 사람은 인텔리지 주고 어떤 사람은 이맥스가 어떤 사람은 VR 스 어떤 사람은 vs 폴리스고 그 모든 도구들에서 똑같이 사용할 수 있는 도구를 만들려고 하다 보니까 이제 cni 기반으로 만들었다라고 하고요.
본인들이 모델을 만드는 회사에서 본인들이 쓰려고 만들었으니까 어떻게했어요 얼마나 잘 만들 수 있을지 상상이 되시죠?
거기에 추가해서 얘네들이 도큐먼트를 아주 잘 정리해서 올려놓고 있습니다.

참석자 1 31:27
그래서 바이브 코딩 하시는 분들은 꼭 엔트로픽의 공식 홈페이지에 클로드 코드 튜토리얼을 꼭 보시기 바라요.
다른 툴을 쓰시더라도 굉장히 도움되는 내용이 많아요.
프로세스에 대한 부분 워크플로우에 대한 부분 프로포팅에 대한 부분 다 있습니다.
양도 많지 않아서 정말 꼭 필요한 부분만 읽을 수 있게 돼 있고요.
제가 봤을 때는 현 시점에서의 거의 교과서적인 그런 사이트다.
엔트로피의 클로디 코드 공식 문서를 꼭 보시길 추천드립니다.
그다음에 사람에게 좋은 기존 개발 방식에 있어서 사람에게 좋은 것은 AI가 AI에게 좋습니다.
이제 바이브 코딩 할 때도 좋다는 얘기예요. 소프트웨어 공학의 어떤 여러 가지 그것들 그다음에 모범 사례들은 그대로 바이브 코딩에서도 사용할 수 있다.
기준 주택은 아까 제가 말씀드린 아르민 노하우가 자신의 블로그 에이전트 코딩 리코멘데이션스라고 하는 데에서 제안한 기술 스텝이 현 시점에 있어서는 아이브 코딩의 가장 최적화된 기술 스텝이라고 생각을 합니다.

참석자 1 32:40
크로드 코드가 몇 가지 이제 유용한 기능들이 있는데요.
자기가 쓴 규칙을 스스로 생성을 해놨는 건지 혹은 커맨드 기능이 있습니다.
그래서 워크 플로우라고도 불리는데 몇 가지 작업들을 한꺼번에 쫙 배치처럼 처리하는 거예요.
프롬프트만으로 복잡한 작업들을 순차적으로 진행을 할 수가 있습니다.
헤드 디스 모드라고 그래가지고 아까 제가 스크린샷에서 보여드렸던 것처럼 그냥 화면에 띄워놓고 얘를 약간 백그라운드에서 실행시킬 수 있는 거예요.
이 헤드리슨 모드를 이용을 해서 주모 클로드 코드가 자식 클로드 코드를 독립적인 컨테이너 환경에 띄워가지고 작업을 발주할 수 있습니다.
야 너는 이거 잡아 너는 이거 너 디펜던시가 없는 작업들을 동시에 진행시킬 수 있어요.
그다음에 플래닝 보드라고 그래가지고 코드를 작성하지 않고 계획만 먼저 짜도록 한 다음에 거기에 맞춰서 진행할 수 있는 그런 기능을 제공하고 있습니다.

참석자 1 33:40
그래서 코드를 작성하지 않고 계획만 먼저 짜도록 한 다음에 거기에 맞춰서 진행할 수 있는 그런 기능을 제공하고 있습니다.
그래서 바이브 코디 제대로 해보고 싶은 분이라고 한다면은 큰 고민하지 마시고 플로드 코드 사용하시라.
그다음에 MCP하고 CLI가 있는데요. 요즘에 하도 MCP MCP 해가지고 사람들이 MCP 안 쓰면 죽는 줄 알았는데 저는 아주 최근까지만 해도 MCP 거의 안 쓰고 다 작업을 했습니다.
cni 가지고는 대부분의 작업이 충분하고 오히려 훨씬 잘 작동해요.
MCP는 게다가 알 수 없게 작동하는 경우도 꽤 있습니다.
그래서 저 같은 경우에는 대부분의 경우에 CLI로 할 수 있는 것들은 무조건 먼저 CLI를 고려를 하시고 왜냐하면 CLI 같은 경우에는 스크립트를 만들어서 자동화시키기가 굉장히 평해요.
MCP는 자동화시키기가 어렵습니다. 프롬프트를 만들어서 하려면 할 수 있지만 그게 돼서 똑같이 동작한다는 보장이 없어요.

참석자 1 34:45
게다가 CLI 같은 경우에는 어떤 파라미터로 어떻게 도작했는지 로그를 남기도록 할 수도 있어서 그런 관찰성 측면에서 우리가 뛰어나다.
그런데 이제 cni도 잘 안 되는 것들이 있는데 프론트엔드 개발 같은 거 할 때 브라우저에서 벌어지는 일들을 내가 추적하고 브라우저에 뭔가 조작을 하고 그런 경우에는 이제 프레이 다이트나 혹은 브라우저 MCP 같은 것들을 사용을 해가지고 그런 작업들을 하는 게 좋고요.
제가 요즘에 정말 요긴하게 써먹고 있는 게 이제 퍼플렉시 MCP입니다.
그래서 AI한테 일시 붙일 때 야 퍼플래시티로 검색해서 검색이 아니지 사실 퍼플래시티는 말 그대로 AI 약간 인사이트 링크 같은 거죠.
그래서 이런 이런 작업을 하려고 하는데 어떤 아키텍처가 제일 좋을지 니가 좀 제안해줘 그러면은 퍼플렉시티한테 프로포트를 작성해서 쫙 보냈는데 기가 막혀요.
엄청 잘 작성해 줍니다.

참석자 1 35:48
그거 가지고선 작업할 수도 있고 아니면 디버깅 같은 거 할 때 어려운 디버깅 같은 거 할 때도 퍼플렉시티 이용해서 작업할 수 있고 여러모로 편리하게 사용하시면 있습니다.
그리고 아르민 로아나가 이 제안한 이 최고의 발코니 언어가 이제 고 언어입니다.
그 언어를 추천하는 이유는 컨텍스트 전달이 굉장히 명확해요.
언어 자체가 심플하다 보니까 이렇게 뭔가 트리키한 부분이 잘 없습니다.
게다가 테스트 캐싱이 잘 돼가지고 반복적으로 테스트를 진행할 때에도 상당히 빠른 속도를 보장을 해요.
구조적 인터페이스가 모델 LLL이 타입을 쉽게 할 수 있는 방 타입이죠.
생태계 변화가 적어서 예전 코드나 지구 코드나 LLM이 이렇게 잘못 이해하고 잘못 작성할 확률이 적습니다.
이거 언어가 매번 막 문법도 바뀌고 뭐도 바뀌고 뭐도 바뀌고 그래가지고 되게 LLL이 골탕 먹는 언어가 대표적인 게 자바스크립트예요.

참석자 1 36:46
타임 스크립트도 그렇고 그래서 짜면은 이거는 이래서 안 되고 저건 저래서 안 되고 한참 해봅니다.
그런 거에 비해서 고령은 굉장히 안정적으로 짜주고 어떤 예측 가능한 코드를 생성하는 데 상당히 유용하다.
또 한 가지 과제는 프로덕션 레벨을 하기 위해서 하는 과제는 이제 보안 측면이 있습니다.
크게 세 가지를 들 수가 있어요. 컴플라이언스와 AI 주거 문제 그리고 AI가 생성한 코드를 100% 믿을 수 있는가라고 하는 측면이 있는데요.
일단 국내 컴플라이언스를 충족하기 위해서는 클라우드의 도움을 받는 걸 저는 추천을 드려요.
아마존 같은 경우는 이제 베드락을 제공을 하고 있어가지고 아까 제가 현재 현 시점에서 가장 바이코 코딩이 뛰어난 모델은 클로드라고 말씀드렸잖아요.
클로드는 클로드 API를 쓰시든지 아니면은 아마존 베드락을 통해서 제공되는 클로드 API를 쓰시든지 그 두 가지밖에 선택지가 없습니다.

참석자 1 37:51
그 밖에 국내 사정에 좀 잘 맞는 특화된 한글에 대한 이해도가 높은 모델을 사용하고 싶다라고 한다면 옥스 스테이지에 이제 솔라 같은 것들도 있고요.
그래서 이런 모델들 그러니까 클로드를 사용하면서 이제 외부 모델을 가져다가 쓸 수 있는 클라임이나 클로드 코드 같은 것들을 이용을 해서 개발하시는 게 현재 현 시점에 있어서는 국내 여러 컴플라이언스를 충족시키는 즉 프라이빗한 테넌시에서 소스 코드를 외부로 노출시키지 않고 작업할 수 있는 거의 유일한 해법이 되지 않을까 싶습니다.
그다음에 이제 AI 기법도 좀 살펴봐야 되는데 최근에 이제 정부에서 서버인 AI라고 그래가지고 얘기를 하니까 어떤 사람들은 야 챗gpt 좋은 거 있는데 왜 우리가 굳이 그거 만들려고 해라고 하는데 트럼프 아저씨가 이제 적대적 AI 금지법을 발표를 했죠.
그래가지고 야 우리가 미국이 봤을 때 우리랑 별로 안 친하면은 AI 로서 그걸 법으로 해가지고 발효를 시켰어요.

참석자 1 39:02
뿐만이 아니라 미국의 엔드 포인트가 있는 AI들은 전부 다 미국에 서버가 있다는 얘기고 그 말인즉슨 미 법원의 명령에 의해서 로그를 수집해 갈 수 있습니다.
미국 행정기관이 그래서 이런 부분들이 있기 때문에 사실 우리나라에서 우리나라뿐만 아니라 모든 나라에서 미국을 제외한 모든 나라에서 어느 정도 일정 수준의 AI를 모델을 확보하는 거는 이거는 할 수 있느냐 없느냐의 문제가 아니에요.
해야만 되니까 하는 겁니다. 그래서 이제 그거에 대한 이제 영화 장면을 옆에 놓은 건데 인터스텔라 장면이죠.
주인공이 이제 부서지는 이제 모선에 도킹하려고 하니까 AI 이제 로봇이 도킹 준비하라든가 불가능합니다라는 얘기다.
네세서이라고 하잖아요. 해야만 한다. AI도 좀 그런 측면이 있다라고 생각을 합니다.
세 번째는 AI가 만든 코드를 100% 믿어도 될까라고 하는 건데 제가 이건 이제 제가 좋아하는 만화를 보다가 생각이 났어요.

참석자 1 40:20
라이어 게임이라는 만화가 있는데 오징어 게임이랑 비슷해서 약간 빛 같은 거 잔뜩 진 사람들이 와서 좀 목숨 건 게임 같은 걸 하는데 이제 거기에 이제 그런 대사가 나옵니다.
이제 남자 주인공 여자 주인공인데 여자 주인공은 약간 좀 어수룩해요.
그래서 막 이제 괜히 사람 믿다가 오징어 게임에도 그런 장면이 나오지 않았어요.
사람 믿었다가 배신당하는데 이제 그걸 보면서 남자 주인공이 얘기를 사람을 의심하고 있다는 거야.
많은 사람들이 오해하고 있는데 사람을 의심한다는 거는 그 인간을 알려준 행위라고 많은 사람들이 믿는다는 미명하에 하는 행위는 실제로는 그 사람을 알려는 노력을 포기하는 거다.
그래서 이제 항상 뭐냐하면 이제 주변 사람들을 열심히 관찰하고 해야 되는데 그래서 그게 이제 믿는다라는 말 한마디에 하는 것은 실제로는 무관심이고 무관심은 의심보다 더욱 비열한 행위다.
저는 이걸 보면서 딱 무릎을 쳤습니다. 이렇게 바꿀 수 있겠구나.
코드는 의심하고 봐야 된다.

참석자 1 41:26
많은 개발자들이 테스트를 작성하지 않는 행위는 사실 코드를 알려는 노력의 포기다.
그거는 믿는 거 코드를 믿는 게 아니라 무관심이죠.
그래서 비열한 행위 테스트 코드를 작성하지 않는 개발자는 그 비열한 행위를 하고 있다.
AI가 만든 코드는 100% 믿어야 될까요라고 하는 질문에 대해서는 100% 믿으면 안 됩니다.
100% 의심하는 방법으로 개발을 해야 돼요. 어떻게 TVD도 라고 하는 이제 좋은 방법이 있죠 텍스트 먼저 만들고 그다음에 실행 코드 만드는 방식으로 접근을 하는 게 가장 좋고 대부분의 바이브 코딩에 성공하고 있는 사람들은 다 TVD로 작업을 하고 있습니다.
근데 특집이 지금까지 좋은 줄 알면서도 사람들이 왜 안 썼냐면은 이게 좀 귀찮거든요.
그쵸? 그리고 제대로 하는 데 있어서 많은 수행과 노력이 필요합니다.
그래서 그거 좋은데 저희는 시간도 없고 우리 회사에서 그거 할 줄 아는 사람이 없어요라고 하는데 모델은 어떻습니까?
TBD로 짜라고 그러면 TVD로 짜요.

참석자 1 42:31
그러니까 물론 약간 토큰이 좀 더 들긴 합니다. td 들자면 토큰이 더 들긴 하는데 전통적인 개발에 있어서 그거 좋은 거 아는데 우리는 할 사람도 없고 시간도 없고 이런 변명이 통하지 않는다라는 거죠.
그다음에 일관성 문제가 좀 발생하기 쉬워요. AI가 작은 분들은 이런 경우는 문서화나 규칙 같은 것들을 계속해서 AI가 자동적으로 업데이트하도록 해서 최대한 이 방만하게 뭔가를 짜려고 하는 AI의 욕구를 억눌러야 되는 그래서 이런 것들을 꾸준히 해줘야 되고 코드나 문서의 예시를 제시해줘야 돼요.
템플릿이나 샘플을 제공해서 그걸 따라서 만들어라라고 하는 거를 강요해 주는 게 좋습니다.
특히나 자동화된 코드 리뷰에서 일관성에 대한 규칙을 강조하면은 굉장히 좋아요.
기존에 짜놓은 코드들하고 일관성이 맞는지 좀 봐라.
무엇보다도 처음에 이 각을 잘 잡는 게 되게 중요합니다.
왜냐하면은 AI가 코드를 짤 때 기존에 짜여져 있는 코드를 참고하면서 짜려는 그런 습성이 강하거든요.

참석자 1 43:43
다 AI 코딩 도구들이 그런 어떤 시스템 프로포트가 들어 있기 때문이기는 한데 그래서 깨지기 창문 이론에 의해가지고 처음 만들어진 코드들을 마구를 쳐 틀을 잘 잡아놔야 돼요.
틀을 잘 잡아놔야 되는데 그렇게 하지 않으면 예를 들면은 처음에 만들어 놓은 코드들이 막 여기저기에 하드 코딩이 돼 있고 약간 린트 줄맞춤 같은 것도 잘 안 돼 있고 이름도 대충 짜놓고 그러면은 그 뒤에 짜는 것도 AI가 이렇게 짜도 되는구나 그러면 사람하고 똑같이 행동하는 비슷하게 짜려면 그다음에 이제 모델이 가지고 있는 제한 사항도 해결할 필요가 있는데 컨택 대안에 대한 제한도 우리가 해결할 필요가 있습니다.
기억할 수 있는 컨텍스트의 양의 제한이 있어서 적절한 컨텍스트 크기를 유지할 필요가 있고요.
이것 때문에 사실은 마이크로 서비스 아키텍처랑 바이브 코딩이 상성이 좋습니다.

참석자 1 44:51
근데 요즘에는 또 모델이 점점 점점점점 컨텍스트 량이 늘어나 가지고 완벽한 마이크로 서비스가 아니더라도 약간 미니 모노리식 서비스 그가 한 테이블 개수 수십 개 정도까지는 어느 정도는 커버가 가능해요.
근데 모노리식이라고 해도 모노리식은 모노리식 대로 또 컨택트 양을 제한하면서 작업할 수 있는 또 테크닉이 있습니다.
그것까지 오늘 다 설명하기에는 좀 시간이 부족하니까 생략하고 어쨌든 마이크로 서비스가 바이코 코딩과는 가장 상성이 좋다.
문서화 같은 것들을 자동으로 수행하고 구현 전에 문서를 참고하도록 규칙을 설정해 놓으면은 AI가 매번 규칙 보면서 그런 일관성을 지키려고 노력을 하게 됩니다.
즉 부족한 기억 용량을 문서로서 보충할 수 있어요.
작은 단위로 가능한 한 작은 단위로 나눠서 구형과 검증을 빠르게 빠르게 해나가는 이것이 바이브 코딩의 핵심 비법이 되겠습니다.

참석자 1 45:54
이밖에 실무를 위해서 몇 가지 조언을 더 드리자면은 요구 사항을 이거 이거 해줘라고 할 때 그것만 하는 게 아니라 의도를 같이 전달해 줘요.
야 너한테 이거 시키려고 하는데 이것 때문에 시키는 거야 그러니까 이 목적을 해결하려고 시키는 거야라는 걸 의도를 같이 전달하는 게 중요하고요.
그리고 먼저 물어보는 것도 필요하다. 너한테 지금 이런 일을 시키려고 하는데 이런 이런 작업 을 니가 하려면은 내가 뭘 너한테 알려줘야 돼?
물어보는 거예요. 그리고 여러 도구들을 사용해서 정기적으로 벤치마크를 한 번씩 돌려보시기 바랍니다.
이게 처음에는 귀찮아서 그렇지 한 번만 돌려보면은 굉장히 손쉽게 할 수 있고 제가 추천드리는 방법은 리얼드 맵 있잖아요.
그거를 열어가지고 새로운 모델이 나오든지 새로운 툴이 나오면은 그거는 스펙이 사양이 공개돼 있어요.
인터넷상에 URL 던져주고 야 너 이거 보고서 또 똑같이 만들어 봐 하면은 만들어주는 거예요.

참석자 1 46:51
그게 몇 시간이 걸릴지 어느 정도 얘가 헤매면서 만들 수 있는지 그걸 보면은 모델과 개발 도구의 도구의 성능이 나온다.
일반적인 모범 사례에 대해서 한번 살펴보려고 하는데요.
가이드 코딩에 있어서도 일반적인 소프트웨어 개발의 모범 사례는 굉장히 중요합니다.
아까도 언급했듯이 사람에게 유용한 것은 AI에게도 유용하고요.
지금까지 소프트웨어 개발에서 권장되어 왔던 여러 번 보도 사례들은 바이브 코딩에서도 똑같이 유용하게 사용할 수 있습니다.
가능한 한 적은 비용으로 기계적으로 수행이 가능한 정적 코드 체커 린트 타이 체커 테스트 등의 작업들이 최대한 자주자주 반복적으로 수행할 수 있도록 하고 그게 CICD 파이프라인 안에서 돌아갈 수 있게 해줘야 되는 캐시 같은 거 적용시킬 수 있으면은 더 빠르게 더 값싸게 돌릴 수 있겠죠.
그다음에 또 몇 가지 모범 사례를 이제 들자면 스와 플러그라 문제가 있습니다.

참석자 1 47:53
아까 의도를 전달한다고 했던 거랑 이제 맞물리는 부분인데 이제 요청 전에 무엇을 알려줘야 될지 정확하게 전달해야 되고 XR 프로그램은 이런 거예요.
원래 하고자 하는 게 있고 그거를 내가 하고 싶은데 물어보는 건 딴 걸 물어보는 거예요.
예를 들어가지고 지금 막 DB 컨넥션 풀이 나가지고 에러가 막 떨어지고 있어 그러면 AI한테 야 디비 컨넥션 풀을 늘려줘라고 할 게 아니라 지금 디비 컨넥션이 풀이 났는데 이 컨넥션 구조를 개선할 수 있는 방법이 있을까 큐잉을 한다든지 아니면은 쿼리를 몇 개를 묶어서 보낸다든지 이런 방법들이 있잖아요.
그냥 컨넥션 개수 늘려줘 그럼 어떻게 하겠어요? 인스턴스 크기만 키우겠죠.
돈만 많이 들고 그래서 왜 컨넥션을 키우려고 하는지 원인을 같이 알려주는 게 AI가 문제를 해결하는 데 훨씬 도움이 됩니다.
그다음에 마이크로 서비스 왜 궁합이 좋은지 아까 설명드렸죠.
그리고 제가 거의 모든 프로젝트에서 빠지지 않고 사용하는 게 솔리드 원칙입니다.

참석자 1 48:57
수정에는 닫혀 있고 확장에는 열려 있는 구조를 만들었다.
가능한 한 작은 모듈들을 여러 개를 붙여서 복잡한 동작만으로 만들어라.
결합도는 낮고 움직도는 높은 코드를 작성하도록 하는데 굉장히 효과적인 원칙이고요.
그다음에 클린 아키텍처 정도만 사용해도 코어 비즈니스 로직을 격리하는 형태로 아키텍처 그러니까 정확히는 클래스나 그런 폴더 구조 같은 것들을 잡아주는 데 있어서 굉장히 유용한 도구입니다.
GDD는 약간 실용성이 현 시점에서 좀 많이 떨어져요.
워낙 나온 지가 좀 오래됐기도 하고 그래서 제 경험상으로는 DDD보다는 클린 아키텍처를 지키도록 좀 의식해서 짜도록 하는 게 훨씬 잘 작동을 했습니다.
그 밖에 단위 테스트나 e2 테스트 같은 것들 자동으로 작성해 TDD로 하다 보면 당연히 그렇게 되는 거고요.
프론트엔드 개발하는 경우에는 엔드 테드 테스트 같은 것들을 UI 테스트 같은 것들을 자동으로 생성하도록 하는 것이 좋습니다.

참석자 1 50:00
버전 관리 당연히 해야 되는 부분이고 린터와 포매터도 적극적으로 사용을 해야 됩니다.
AI가 읽을 거니까 굳이 리턴한 포미터 필요 있을까요라고 하시는 분들 계신데 아닙니다.
필요 있어요. AI가 작업하더라도 인터와 포메터를 사용을 해서 포드의 어떤 일관성을 보장시키는 게 굉장히 중요합니다.
리드미 문서도 상시 유지를 해서 처음에부터 이제 만들고 이후에도 계속해서 업데이트해 나가는 게 되게 중요한 왜냐 AI가 리드미 문서를 수시로 참고를 하면서 개발하는 데 필요한 정보를 얻기 때문이에요.
그리고 현재 진행 상황이나 단계 같은 것들을 갖다가 문서화 혹은 요즘에 제가 사용하는 방법인데 질라나 기업 이슈 같은 것들을 계속 보면서 야 너 지금 현재 어디까지 작업했는지 파악해라라고 하면은 그런 이슈 트래커 혹은 이제 티켓 시스템들을 사용을 해서 추적을 할 수가 있게 됩니다.
바이브 코닉 관련해서 최신 정보들을 얻을 수 있는 소스들을 마지막으로 좀 소개를 시켜드리려고 하는데요.

참석자 1 51:08
아까도 언급했었던 아르민 브로나의 블로그 그다음에 유튜브 채널을 항시 보시기 바랍니다.
최근에도 이 양반이 불과 한 이틀 됐나 이틀 전쯤에 이제 자기 이제 온라인에서 발표를 했어요.
근데 너무 좋은 내용들이 가득하고요. 그리고 이제 제가 바이브 코딩 뉴스라고 하는 단톡방을 만들었습니다.
그래서 여기 이 단톡방 들어가시면은 바이브 코딩 관련 최신 정보를 갖다가 공유를 하고 있는데 이제 그 단톡방에 규칙이 2개가 있어요.
바이브 코딩 관련 뉴스만 올릴 수 있고 인사도 필요 없습니다.
인사 굳이 안 하셔도 되고요. 그다음에 또 한 가지는 내가 바이브 코딩으로 이런 거 만들었어요라는 걸 갖다가 거기서 자랑하실 수 있어요.
그래서 내 프로젝트를 자랑하거나 발고 코딩 관련된 정보를 공유하거나 그 두 가지만 허용이 된다.
여기까지 해가지고 엄청 숨 바쁘게 왔는데 다행히 또 제가 생각했던 거 조금 시간이 남는 겁니다.
여기까지 해가지고 혹시 궁금하신 점 질문 있을까요?

참석자 1 52:19
혹시 마이크 받아 주실 분 손을 들으시면은 마이크

참석자 1 52:32
어떤 거라고요? 오프스 같은 경우는 조금 더 얘가 똑똑하긴 한 것 같아요.
똑똑하긴 한 것 같은데 예를 들면은 설계를 한다든지 아니면은 디버깅 같은 거 할 때는 복잡한 제품이 있잖아요.
그런 거 할 때는 오쿠스가 소넷을 해결하지 못하는 것들을 종종 해결해 주기도 하고 근데 거의 한 95% 정도 제가 하는 작게 나눠서 빠르게 구현해 나가는 방식에는 소넷까지고도 충분히 잘 부탁합니다.
그래서 그냥 디폴트 그거 그거 아름 님이 제안한 건데 디폴트로 소넷 쓰고요.
가끔 이거 손넷이 잘 안 되는데 싶은 것들만 그때 오프스를 사용하는 방식으로 쓰시면 좋습니다.

참석자 1 53:25
또 혹시 뒤에 계신 분 예 안녕하십니까?

참석자 3 53:30
아까 프로포털 만들면서 TDD 방식에 대해서 말씀을 하시면서 같이 좀 미dd도 네 이거 미dd도 말씀을 하셨는데 그것도 같이 좀 활용을 해서 다이 테스트하거나 그런 데 활용을 하시든지

참석자 1 53:45
그러니까 사실 DDD는 약간 좀 더 TDD보다는 상위 개념이잖아요.
그래서 필요한 경우에 쓰시면 좋다라는 거고 일단은 단위 테스트는 반드시 필요하지만은 그 외에 BDD나 인티그레이션 테스트나 아니면은 엔드 투 엔드 테스트 같은 것들도 적극적으로 사용하시면 좋다라고 하는 거 너무 많으면 또 얘네들이 시간 잡아먹잖아요.
그래서 그 부분은 프로젝트의 성격에 따라서 약간 적절한 그런 지점을 찾으셔야 될 것 같아요.
예

참석자 1 54:24
또 혹시 질문 있으실까요? 네

참석자 4 54:30
네 안녕하세요. 아까 스크린샷 보여준 것 중에 플로드 코드를 여러 개 띄워서 이제 작업하는 것들을 잠깐 보여는 게 인상 깊은 결국 그 큰 하나의 프로덕트를 만드는 거를 쪼개서 개발한다고 저는 생각을 했는데 제가 했던 바이 코딩은 사실 순차적으로 만들어 나가다 보니까 얘네들이 병렬적으로 담아보는 게 되게 좀 어려워하더라고요.
그런 거를 뭔가 오케스트레이션을 하거나 하는 방법이나 그런 칩 같은 게 있을까요?

참석자 1 54:56
시키면 잘 합니다. 너가 테스크 분할한 다음에 테스크 간의 의존성을 갖다가 파악해 봐라 그러면은 굉장히 잘 파악해요.
그래서 의존성이 없는 애들은 병렬로 돌려도 되잖아 그러면은 병렬로 만들 수 있어요.
예를 들면은 백엔드 프론트엔드 API 구조만 나와 있으면 경렬로 만들 수 있죠.
그런 거고 그거 한번 살짝 보여드리면은

참석자 1 55:29
약간 아까 보여드린 이 화면이죠.

참석자 1 55:36
일단 일 안 하는 거야 지가

참석자 1 55:47
네 이 양반 같은 경우에는 이거 돌려놓고 자기는 애랑 나가서 놀이터에서 놀아주고 그런 것도 되게 자연스럽게 얘기하고 했는데 현재 자기가 하는 작업의 95%는 오토메티컬리 하고 있다 이런 얘기를 하고 있는 실제로 이 비슷한 경험을 얘기하고 있는 분들이 많아요.
이거는 이제 부모 클로드 코드가 이 자식 클로드 코드 여러 개를 생성해서 이제 일을 던져주고 이제 수행하는 방식으로 작업하는 거를 보여주고 있는 거고요.
이것도 비슷한 방식인데 사실 이런 식으로 프로포트 막 올라가는 거는 이렇게 의미가 없겠죠.
사람이 이걸 다 볼 수가 없잖아요. 무슨 정보가 들어 있는 까 제 생각에는 이런 방식으로 동작하는 게 나올 것 같아요.
또 뭐냐 하면은 이제 바이브 코딩실 이거 그냥 모범인데요.
현재 영문으로 돼 있으니까 현재 프로젝트 현황 테스트가 29개가 있는데 그중에서 완료 3개 됐고 현재 5개가 병렬로 진행 중이고 토크는 이 정도 지금 분당 소비하고 있다.

참석자 1 56:56
비용은 1500불 한도에서 너가 분당해라라고 하면은 이 정 현재 진행하고 있는 테스트들은 이거 구현 중인 건 이거고 이런 식으로 해서 아까 것보다는 훨씬 사람이 봤을 때 좀 더 프렌드이 하죠.
이런 방식으로 된 도구가 조만간 나오지 않을까라고 하는 거고 이거는 제가 이제 데모를 하기 위해서 한 건데 뭘로 만들었냐면은 클로드에 아티펙트를 사용을 해서 만든 겁니다.
이게 이제 실제 아티팩트 가지고선 이거를 만들 때 사용한 프롬프트들이고요.
처음에 이렇게 해서 바이브 코딩해서 자동으로 구현하는 테스크를 글자가 짜고 안 보이시네.

참석자 1 57:40
그래서 얘한테 알려주고 실제 UI를 제가 이런 식으로 만들어 달라고 해가지고 약간 목업 형태로 이제 만든 건데 이거 어떻게 만든 거냐 하면 이제 일요일 날 아침에 헬스클럽 가가지고 런닝머신 하면서 만든 겁니다.

참석자 5 58:03
옛날 같았으면 저런 거는데

참석자 1 58:04
잘 운동을 열심히 못했지만 아무튼 이게 나왔어요.
그래가지고 디비전 43호까지 운동했어 해서 만들었다.

참석자 1 58:20
네 마이크 좀 부탁드릴게요.

참석자 6 58:37
네. 안녕하세요. 보수적인 이제 공기업에 적응하기 위해서는 보안적인 이슈를 해결해야 될 것 같은데 이제 현실적으로 대고객 서비스에 바로 당장에 적용을 할 수 있을지에 대해서 현실적인 고민이 좀 있죠.

참석자 1 58:52
그거는 현실적인 거라고 하시면 안 되고 아까도 말씀드렸다시피 우리가 해야 되니까 하는 거다라는 걸로 접근해야 돼요.
망 많은 기업에서는 안 해서 이거는 우리는 못 써라고 말하시는 분들이 있을 텐데 그럼 못 쓰는 거죠.
경쟁사가 나타날 거고 경쟁사는 써가지고 우리 회사를 압도하는 퍼포먼스를 보일 거고 제일 보수적인 게 언제예요?
우리나라에서 금융권이잖아요. 금융권 지금 어떻게 됐어요?
전통 있고 오래 있는 회사들 잘 나가요? 아니죠. 새로 생긴 회사들한테 지금 싹 다 달리고 있잖아요.
그리고 그 사람들이 얼마나 위험하고 무서운 사람들인지 알아야 돼요.
그런 어떻게 하면 안 할 수 있는 방법을 찾을까라는 거에 대해서 아무런 죄의식 없이 말한 사람들이 회사에 얼마나 유해한 존재인지를 알아야 될

참석자 3 59:48
막 하라고 그러잖아요.

참석자 1 59:50
그 컴플라이언스가 이러면은 이거 어떻게 해서 그럼 우리가 쓸 수 있지 그걸 찾아야 돼 방법을 찾아야 돼 저는 그렇게 접근해 나가지 않으면 답이 없다고 생각을 합니다.

참석자 1 1:00:11
네

참석자 1 1:00:18
네 안녕하세요. 오픈 AI랑 클로드 제미나이는 왜 등한시 하셨는지 네 알겠습니다.
보니까 그렇게 해. 예. 제가 요 근래에 클라임이랑 제가 2.5%를 이용해서 좀 개발을 하고 있는 네.

참석자 5 1:00:38
성능이 생각보다 너무 좋고 되게 빠르고 그래서 이 정도면 프로드 정도는 그냥 받을 수 있지.
아니 그런데

참석자 1 1:00:49
실제로 지금 이번에 재미난 CLI 같은 경우는 구글 램프에서 사용하는 도구를 조금씩 바꿔가지고 외부로 오픈했다라고 하더라고요.
그만큼 평판도 좋고 근데 최근 제가 바빠가지고

참석자 1 1:01:10
제미나인 CLI를 아직 평가해 볼 수 있는 시간적 여유가 없었습니다.
근데 줄스 나왔을 때는 이것저것 해봤거든요. 근데 상당히 실망스러워 가지고 일단은 당분간은 두 그룹 믿고 걸르자 약간 그런 스탠스를 가지고 있었는 네 한번 경험해 보시는 것도 좋지 않을까 하겠습니다.
한국노총은 구글하고 아마존 제품들에 대한 뿌리 깊은 불신을 가지고 있습니다.
개인적인 경험에 기반한 거니까 약간 그 부분은 가만 안 들어주세요.

참석자 1 1:01:54
또 혹시 질문 없으실까요? 데모로 넘어가도 될까요?
여러분 네 그러면은 데모로 넘어가도록 하겠습니다.

참석자 1 1:02:13
지금부터 보여드릴 대본은

참석자 1 1:02:26
다음과 같은 순서로 진행을 할 건데 우선 주제를 하나 잡아보죠.
어떤 거 만들어 좋을까 여기에 한 3개 정도 개발 대단계하고 푸드 리스트 관리하고 채팅도 게임이 있는데 이게 일반적으로 많이 사용하는 겁니다.
백핸드가 있으면 좋겠으니까 투두 리스트 관리를 한번 규칙을 먼저 생성을 해야 됩니다.
그래서 이 규칙이라고 하는 거는 매번 프롬프트 히스토리와 함께 LNN에 입력으로 사용되기 때문에 가능한 한 정보를 응축해서 작성해 놓는 게 좋아요.
그리고 한글보다는 영문으로 원래 작성하셨으면 좋습니다.
조금 더 영문이 효율이 프론트 효율이 좋고요. 그리고 굉장히 강력하게 AI의 행동을 제약할 수 있습니다.
모델에 따라서는 규칙 정도 약간 준수 정도가 좀 다르고요.
그다음에 요건 정의로부터 자동 생성하는 것도 가능해요.
템플릿을 사용해서 만들어져 있는 규칙을 인포트해서 사용하는 것도 어느 정도 할 수 있습니다.

참석자 1 1:03:29
툴에 따라서는 여러 가지 복잡한 추가적인 문법을 통해서 규칙을 적용하는 것도 가능하고요.
규칙을 만들고 나면 요건 정의를 할 텐데 사실 요건 정의랑 규칙이랑 두 개를 바꿔서 할 수도 있으면 요건 먼저 정의하고 그다음에 규칙 만들어도 되는 경우도 있습니다.
그래서 요건 정의는 이제 바이크 코딩에 있어서 가장 중요해요.
PRD라고 하는 문서를 만드는 건데 육하 원칙의 요소들이 안에 포함돼 있으면 좋습니다.
누가 만드는가 언제 만드는 건가 무엇을 무엇에 플러그 어디에 만들 것인가 무엇을 만들 것인가 이거 왜 만드는가에 대한 부분들 그리고 어떻게 만들 것인가 이런 부분들이 어느 정도 기술이 돼 있으면은 좋습니다.
근데 항상 들어가야 되는 건 아니고 이 6가지 중에서 적절하게 그러니까 AI가 컨텍스트를 충분히 이해할 수 있을 만큼 들어가 있으면 되고요.
요건 정의가 끝나게 되면은 이제 설계 문서를 작성하면 됩니다.
요건 정의의 내용을 구체화시키고요.

참석자 1 1:04:26
하나의 파일에 컨텍스트가 넘어가지 않도록 적당히 파일을 공유하는 것이 필요합니다.
이 설계 문서 작성할 때 예전에는 저 웹 오바이트나 아니면 SVG 같은 것들을 활용했는데 최근에는 제가 브로우 와이드도 그려보라고 그러니까 상당히 잘 그리더라고요.
브로 와이드도 드로우 와이 아키텍처 다이그램 같은 거 브로우 와이 와이드 아이라고 이렇게 해서 설계 문서가 나오게 되면 그다음에 이제 테스트를 작성을 하게 되는데요.
이 테스트를 마크 다운 문서로 작성할 수도 있고요.
아니면은 지라나 기타 이슈 같은 데에다가 작성할 수도 있습니다.
한 번 분할한 다음에 분할이 충분한지를 검토하도록 시킬 수도 있어요.
원래 이 테스트 작성하거나 분할하는 작업은 테스트 마스터라고 하는 툴을 예전에 많이 사용을 했었었는데 지금은 클로드 코드 사용하면서는 거의 테스트 마스터를 쓰지 않게 됐습니다.
클로드 코드가 이 작업을 워낙 잘해줘요.

참석자 1 1:05:22
그래서 별도의 툴을 사용하지 않고도 할 수 있고 이 테스크 만들 때 항상 이제 제가 사용하는 방법이 이 테스트가 끝났다는 거를 니가 어떻게 증명할래를 넣어주는 거예요 우리도 그거 하잖아요.
티켓 만들 때 인수 조건 만들죠 안 하면 어떻게 되겠어요?
개판되죠 다 엔드로 돼 있는데 실제 이면은 하나도 동작 안 하는데 야 너 이거 왜 드라고 했는지를 갖다가 어디에 증거가 없어 AI테도 마찬가지야 너 이거 작업 끝났다라고 표시하려면은 증거 여기다 첨부해 에그레트 첨부해라는 것들을 갖다가 명시하도록 요청할 수 있습니다.
그다음에 여기까지 되면은 이제 구현하고 하는 작업을 TDD로 진행하면은 이후로는 사람이 손댈 게 별로 없어요.
이때 퍼스키 같은 것들을 사용을 해가지고요. 귀 속에서 린트나 빌드 테스트가 자동으로 수행되도록 하면은 엄청 좋습니다.
기툭 많이들 사용하세요.

참석자 1 1:06:29
기툭에다가 약 커밋 탈려면은 민트하고 빌드하고 테스트 다 돌아서 통과돼야지 커밋이 돼라고 하는 거를 박아놓을 수 있어요.
프리컴의 투에다가 박아놓을 수 있습니다. 그러면은 그거 통과 안 되면은 버전이 안 올라가요.
이제 푸시는 아예 당연히 언간 뱅킹 말도 안 되고 로컬에더도 커밋이 안 된다니까요.
그렇게 하면 어떨 것 같아요. 엄청 타이트하게 관리되는 코드들이 양질의 코드들이 생성이 되겠죠.
그리고 이제 디버깅 작업도 이제 필요한 경우가 있는데 사실은 이제 제가 하는 작업에서 거의 대부분의 부품은 디버깅 하는 데 많이 사용이 돼요.
도구들이 보여야 되다 보니까.

참석자 1 1:07:17
그래서 디버깅 작업도 가능하면은 로그 가져와서 필터링하고 하는 것들은 스크립트를 얘한테 만들어서 야 이거 니가 다 로그 읽지 말고 에러 표시되거나 아니면은 디버깅에 필요한 정보만 필터링하는 스크립트 만들어서 좀 써라 그러면은 걔가 그 스크립트 AI가 그 스크립트를 실행해서 필요한 정보만 가져와서 디버깅 하는 데 사용할 수 있습니다.
그러면 토큰을 많이 안 쓰겠죠.

참석자 1 1:07:45
그러면 실제 한번 모습을 살짝 보여드리도록 하겠습니다.
시간이 좀 제약이 있어가지고 제가 엄청 열심히 보다 보니까 생각보다

참석자 1 1:08:07
이거는 지금 아무것도 없는 프로젝트고요. 여기에 지금 간단해 클로드 지금부터 이제 클로드 코드로 작업을 할 거고 아무것도 없는 상태입니다.
약간 스토리가 빈 껍데기예요. 껍데기 절대 아무것도 없는 요트도 지금 폴더만 만들어 놓은 거고 커밋 할 때 몇 가지 작업들을 동시에 수행하도록 이렇게 해놨는데 투터리얼에다가 넣어야 되는 코멘트에다가 새로운 칼을 만들어서 영상 찍어야 되겠다.
이거 이제 끝나고 나면은 비터에다 올려가지고 리포지토리 공유해 드릴 테니까 나중에라도 이거 보면서 그대로 따라 해 보시면 좋을 것 같아요.
그렇다면

참석자 1 1:09:25
이건 안 하고 나중에 들어가 이렇게 해가지고 스토리얼 요거는 이제 데모를 위한 프로젝트인데 슈토리얼을 만들어가면서 실시간으로 만들어가면서 이제 작업을 할 거예요.
클로드 코드한테 제가 이제 요청을 하겠습니다. 이 프로젝트는

참석자 1 1:09:51
데모

참석자 1 1:09:56
만들려고 하는 집은 백엔드와 프론트 엔드를 갖춘 투두 리스트

참석자 5 1:10:16
윈디서 품질 중요하지 않아 데 vs 코드로도 되는 거고 그거 코드만 설치하면 돼.
그냥 그런 내가 설치해 놨어. 지금

참석자 1 1:10:27
필요 없어

참석자 1 1:10:35
맞춘 앱을 MVP 미니멈 바이어블 프로덕트 방식으로

참석자 1 1:10:58
작성하기 전에 pp를 작성하기 위해서 필요한 내용들을 정리해줘.
3 PRD ADS 이렇게 복스 폴더 아래 두 개줘. 전화해줘.
지금 여기에 의도도 들어가 있어. 이거 라이프 코딩이야.
학습용이야 이거 그러니까 보안 같은 거 그렇게 신경 안 써도 돼.
빨리빨리 동작하면 좋겠다.

참석자 1 1:11:42
그래서 얘가

참석자 1 1:11:51
토크 토크 돈 올라가는 거 봐라.

참석자 1 1:12:06
여기에

참석자 1 1:12:11
색상이 있어요. 프리 PRD 오퍼레이션 PRD 오퍼레이션이라는 걸로 하나 만들었어요.
저는 이제 이거 이름을 프리pr이라고 했는데 얘는 이제 그냥 그 이름을 바꿔서 이제 그거 크게 상관없습니다.
아무튼 이렇게 해서 만들었고 지금 현재 제가 사용하고 있는 도구는 클로드 코드고 소넷을 지금 사용을 하고 있습니다.
여기 지금 소넷을 사용을 하고 있고요. 그래서 이렇게 지금 pid 문서가 나왔는데 얼추 이런 내용들이 필요한 기능들 같은 것들 건데 이거 사용하는 기술 스펙을 아까 제가 이비달 통 신창을 했던 아르민 로나가 제안했던 것을 이용을 해보고자 해요.
그래서 에이젠 에이젠 티

참석자 1 1:13:42
이 프로젝트는

참석자 1 1:14:28
바로

참석자 1 1:14:45
아니 뭘 만든다고 하는지는 제가 다시 한 번 할게요.
지금 인터 로크를 걸었고요. 이거 이제 플래닝 같은 거 할 때는 시프트 테크 눌러가지고 이 아래쪽에 있는 부분은 플랫 모드를 갖다가 오픈을 시켜서 이야기하면 됩니다.
그래서 우리가 기술을 넣으면 돼 겠죠.

참석자 5 1:15:21
일단 개발자가 저기서 코딩으로 끼어들 구멍은 없는데

참석자 1 1:15:28
아드민이 제안한 오너 리액트 생산성 또 여러분들

참석자 1 1:15:37
그걸로 해서 그러면은 ys 하면은 얘가 이제 뭔가 할 때 뭘 할지 내가 지정을 했으니까 키 플래닝 하고 이거를 모드를 이제 풀도록 하겠습니다.
이제 현재는 이제 바이 패싱이어가지고 AI가 그냥 혼자서 다 알아서 할 수 있는 권한을 다 준 상태로 이제 바꿨어요.
그러면은 우리 제안대로 pid 문서를 완성해줘.

참석자 1 1:16:15
네 기술 스펙을 반영한 pid 문서가 지금 작성이 되고 있습니다.
그러면 여러분들 이거는 신규니까 그렇다 쳐도 기존의 프로젝트가 있는 경우는 어떻게 하면 될까요?
똑같아요. pid 문서 기존 소스 코드나 기존에 있는 여러 가지 문서들 읽어서 만들려고 하면 되고요.
그래서 예를 들면 기존에 있는 문서들이 워드나 엑셀이나 이런 걸로 작성이 돼 있다라고 한다면은 AI가 좀 잘 익을 수 있게끔 그런 것들을 다 마크 다운으로 변환시켜가지고 리포지토리에 넣어주는 좋습니다.
그러고 첫 시작을 뭘로 하냐면은 기존 문서들 이거 있는데 이거 소스 코드랑 다 싱크가 맞아.
네가 좀 보고 리뷰 좀 해봐 봐. 틀린 거 있으면은 바로 고치지 말고 나한테 좀 제안 좀 해줘.
그러면 그거 쭉 뽑아서 알려줄 거야. 그래서 차이점만 따로 문서 하나 만들어가지고 그거 보면서 하나하나 체크해 나가시면 돼요.
그런 식으로 하면은 우선 기존 시스템을 마이그레이션하는 데 출발 지점으로 이용할 수 있습니다.

참석자 1 1:17:25
얘가 지금 보면은 뭔가를 할 때 스스로 약간 자기가 작업 계획 같은 걸 세우고 있는 거 볼 수 있죠.
여기 업데이트 스텝 기술 스택 조사 및 분석 선정하고 최종 문서화하고 이런 작업들은 자기 스스로 이런 것들을 만들고 있는 걸 볼 수가 있습니다.
그래서 PRD 분석 아이 되었고요.

참석자 1 1:17:47
이거를 갖다가 현재 작업 워크스페이스를 키터에 돌려줘.
기터 이제 오가리제이션은 제가 오가지션을 여러 군데 들렸어가지고 이거를 여기죠.

참석자 1 1:18:19
이렇게 하면 이제 요 티 타임즈 아이드 코딩 컨퍼런스라고 하는 이름의 것을 내가 저장소 초기화하고요.
깃터브에 올리는 것도 cni까지도 할 겁니다.

참석자 1 1:18:39
웹 페이지 들어가가지고 기타도 보고 로그인해서 거기서 리포지토리 생성하고 그다음에 막 리모트 설정하고 할 필요가 없어 얘가 다 해줘.
이미 절까지 다 끝냈어요.

참석자 1 1:19:35
제가 지시한 거에 대해서 스스로 작업 목록을 지금 만든 거죠.
입 저장소 초기화하고 리코스토리 생성하고 푸시하고 이걸 굉장히 잘해요.
앞으로 모든 다이고 코딩 공구들은 다 이걸 할 겁니다.
너무 그렇게 사실은 툴에 또 얽매이지 않아 보 솔직히 된다라고 생각하는 부분은 바이 코딩 도구들이 서로서로 엄청 빨리 뺏겨요.
이번에 사실 나온 구글에서 나온 제미나이도 cni 보면서 깜짝 놀란 게 아니 그래도 구글씩이나 되는 회사가 이렇게 염치없이 대로 베껴도 되나 싶을 정도로 열심히 베꼈더라고요.
근데 클로드 코드도 다른 애 거 안 뺏겼냐 그러면 또 약간 또 거기에 대해서 자유롭지 않거든요.
왜 그런 일이 벌어지냐면은 전부 이 바이크 보디 공구들은 다 클라이언트 단에서 모든 일이 벌어지니까 다른 애들 어떻게 하는지를 들여다보기가 너무 쉬운 거예요.
모델은 다 비슷한 모델을 쓰고 그래서 그런 차이점이 좀 발생한다라고 하는 거고요.
그러니까 차이점이 거의 없다.

참석자 1 1:20:42
근데 그 와중에도 다만 몇 발자국이라도 현 시점에서 앞서 나가고 있는 게 제 생각에는 스트로드 코드라고 생각을 하고 여기까지 해가지고 잘 끝났고요.
그다음에는 이제 이거에 맞춰서 이제 규칙을 생성하라고 했어요.
이때 이제 in it를 치면은 지금 만들어져 있는 것들을 보고선 네가 지금 만드는 규칙을 생성하는 그러니까 얘네들 제 요 1위는 뭐냐면은 클로드 코드에 대한 이미지예요.
규칙 얘가 이제 자동으로 생성할 거예요.

참석자 1 1:21:44
자동으로 생성이 끝났습니다. 끝났고 뒤에 있는 분들 글자 잘 보이세요

참석자 1 1:22:03
이 정도가 좀 이제 이거는 단지인 것 같습니다. 해서 플러드 MD 파일 생성했고요.
이렇게 하면은 저기 안 보이는구나

참석자 1 1:22:19
이 정도로 키워서 써야겠네 됐고요. 참고로 얘가 무슨 작업을 했는지는 이게 치기 두 번 누르면은 이렇게 히스토리 같은 걸 볼 수가 있습니다.
이렇게 해서 클로드 MD 파일 생성했고 이게 이제 규칙 파일이에요.
규칙 파일이고 영어로 기본적으로 작성 하는데 보면은 얘가 이제 자기가 지금부터 개발하는 데 있어서 행동 지침으로 삼을 것들을 얘가 마련해 놓은 거예요.
마련해 놓고 그다음에 이걸 갖다가 그다음

참석자 1 1:22:59
이제 PRD에 기반해서 이런 계획을 거죠.

참석자 1 1:23:12
그냥 이름 파일 역은 정해지는 게 좋겠다. 그냥 한번 해볼까요?
제가 알아서

참석자 5 1:23:38
나도 나름 이게 순서가 있네 규칙이 있어

참석자 1 1:23:54
토큰을 쭉 소비해 가면서 이제 이게 사실은 요 전체 프로젝트도 그렇고 나머지도 그렇지만은 이 계획 수립하는 데 토크는 상당히 많이 들어요.
그러니까 그만큼 더 얘가 열심히 일을 한다라고 보시면 되고요.
이게 좀 어렵고 복잡한 그런 프로젝트다라고 한다면은 몇 가지 트집이 있습니다.
아까 오프스라고 하는 좀 더 이제 고급 좀 이제 대형 모델을 사용하는 것도 한 가지 방법이 될 수 있고 마법의 키워드가 있어요.
싱크하드라고 하는 걸 쓰면은 얘가 엄청 열심히 얘가 이거 디버그 할 때 많이 쓰는데

참석자 1 1:24:39
그래서 이제 구현 계획을 이제 문서화해서 문서를 뭔가 만들어 인플리멘테이션 플랜이라고 하는 게 있거든요.
근데 여기 보면은 얘가 지금 며칠 며칠 이러는데 이건 이제 기존에 사람이 하는 거 보면서 나이서 보는 거예요.
이거는 좀 제가 적절한 피드백을 주도록 하겠습니다.
이건 라이브 오디 가서

참석자 1 1:25:21
그러면 이제 일정에 대한 부분은 이제 내가 쫙 다 빼줄 거예요.

참석자 1 1:25:33
약간 이런 식으로

참석자 1 1:26:15
오케이 이렇게 해서 인플리멘테이션 이제 여기서 또 하나를 또 만들어 라이브 데모 플랜이라고 하는 걸 만들었네요.
아무튼 이거는 지워버리고 이걸 쓰도록 하죠. 나이프 된 데이라고 만들었고 이름이 좀 마음에 들지 않아요.

참석자 5 1:26:36
그래서 이름을 받다

참석자 5 1:26:48
지워졌어 지워졌어 지워져 버렸어

참석자 1 1:26:56
풀르는 부분을 제가 이거는

참석자 1 1:27:03
라고 이름을 붙습니다. 여기까지 보면은 거의 프로젝트가 끝난 거라고 그러니까 절반 정도 끝난 거라고 생각돼요.
그러면은 테스트 이거는 이제 엔라트 써가지고 이렇게 지정하시면 되고요.
엔터 치면 테스크 n

참석자 1 1:27:36
디터 디션 이슈를 만들어줘.

참석자 1 1:27:44
이슈는 반드시 작업 내용 그다음에 작업 그리고 인수 조건 엑세턴스 프라이텐이라고 ac가

참석자 1 1:28:07
여기에다가 이렇게 의존성도 가 의존 각 테스크들 간의 의존성으로

참석자 1 1:28:40
이건 이제 팀 작업할 때 개인 작업하면 그냥 파일 로드 충분하고요.
그거를 팀 작업을 한다든지 어쨌든 회사에서 작업하면은 외부에 메타스크가 보이는 게 좋잖아요.
그런 방식으로 해가지고 비터 이슈에다가 작업들을 만들 수 있어요.
얘가 지금 알아서 지금 기 tni 가지고선 쭉 만들고 있는 걸 볼 수가 있고요.

참석자 1 1:29:06
삭제로 얘가 만드는

참석자 1 1:29:28
이게 지금 만들어진 거고요. 여러분들 지금 가서 보시면 확인할 수 있습니다.
깃텃 로봇코 아이유의 티 타임즈 아코디 퍼포먼스라고 하는

참석자 1 1:29:59
비저빌리티 컬러 트리 퍼블릭에 퍼블릭 만 돼 데모형이니까 커브 퍼블릭으로 해준 거예요.
이거 보안이 중요해 매크로 들어가면 안 돼 이런 식으로 하면 얘가 파란게 좀 만들어지는 이렇게 해서 지금 미드민으로 만들어서 있고요.

참석자 1 1:30:39
doc 폴더 안에 가보면은 지금 작성한 보도들도 이렇게 보실 수 있습니다.
그리고 무엇보다도 지금 만든 것들 이슈 가서 보면은 지금 이슈들이 쭉 생성돼 있죠.
너무 작아서 그러니까 그게 키워 이런 것들 현재 지금 등록하고 있어요.
페이지 1 2 3 해가지고 쭉 만들어 나가고 있다.

참석자 5 1:31:04
좋네 저런 거 사실 깊이지

참석자 1 1:31:14
이후는 그냥 얘 보고 이제 알아서 다 하라고 하면 되고요.
이 지금 내용 가지고 지금 슈토리어를 만들 수 있습니다.

참석자 1 1:31:27
그래서 이거 지금 제가 미리 커맨드 안에다가 튜토리얼 전이라고 하잖아요.
조금 좀 올려주는 거 손 이거 사용해서 이제 슬렛이 되면은

참석자 5 1:31:40
순서별로 다 정리를 해줘가지고

참석자 1 1:31:43
아 얘가 지금 이게 있다 이거 새로 하나 들 게 있다. 얘 선행지를 만들면 바로 못 쓰고 나갔다가 들어와야 되더라고요.
스토리얼 지금 스토리 업데이트가 뜨죠. 엔터 치면은 얘가 제가 지금까지 나눴던 대화 내용들에 기반해서 초토리오를 만들 거예요.
알고

참석자 1 1:32:20
폴더도 찾아서 봐라. 그 안에 있는 거 제대로 맞는

참석자 1 1:32:46
자 커밋 실행하면 돼요. 제가 커밋이라고 하는 커맨드를 미리 만들어놨기 때문에요.
기 스테이터스와 df로 변경 사항을 확인하고 변경 사항이 많을 경우에 분리해서 순차적으로 따로따로 레드 해가지고 넣고 커밋을 분리해서 이거 개발자분들 귀찮으니까 다들 어떻게 하세요?
에드 점 이렇게 그런 거 쓰시는 분 안 계시겠죠 양심 없이 저도 그렇게 많이 하는데 언제든지 깔끔하게 다 해서 그리고 메시지도 아주 성실하게 다 넣어줍니다.
지가 알아서 다 먹는 거 실제 넣어준 메시지 같은 것들도 보면은

참석자 1 1:33:34
제가 들어왔거든 만들고 이런 식으로 엄청 성실하게 딱

참석자 1 1:33:49
튜토리얼도 넣어서 만들었거든요. 이거는 코멘트고 튜토리얼 돼요.
얘 가끔 이거 깨져요. 그래서 얘한테 알려줘야 됩니다.

참석자 1 1:34:09
의 를 t ETF a 그거 이제 이따가

참석자 1 1:34:24
이거 사실 이렇게 하면은 토큰 많이 받거든요. 얘가 얼마나 만들지 모르겠는데 가끔 보면은 좀 이런 부분들이 좀 약간 이거를 이렇게 해서 이것도 이제 그냥 니가 직접 하라고 하지 말고 f a 값으로 바스타는 를

참석자 5 1:35:02
토큰이 들어가고

참석자 1 1:35:10
독자 코드를 파악해서 변화한 스크립트를 만들고 그걸 사용해서 변환시켜 그러면은 얘가 생으로 싹 읽어서 할 수 있는데 그거보다 훨씬 저렴하게 빠르게 할 수 있게끔

참석자 1 1:35:27
저기가 지금 공간 좀 고쳐가지고

참석자 1 1:35:33
아까 내가 이름을 바꿔서 그런데 사실 이런 거 이름 바꾸는 것도 직접 하지 말고 얘한테 시키면은 좀 더 콘텐츠가 잘

참석자 1 1:35:44
표시가 됐고 실제로 여기 가보면은 커밋 이력에 지금 제가 작업한 내용들이 올라와 있는 거

참석자 1 1:36:01
예전에 강조를 했었는데 요즘은 영어로 하는 게 조금 조금씩 더 빠릿빠릿하더라고요.
큰 저게 없으니까

참석자 1 1:36:16
주시면 되고 얘도 지금 정리도 깨져서 보이니까 스토리얼 보고 싶은데 토리얼 점 맞기다 나왔어.
잠깐 내가 그거는 필요 없다 이렇게 라이브 데모 투토리온 데모 세션 디즈 스테 이런 거 프론트 제가 한 거 그대로 다 들어가 있죠 여러분들 이거고 지금도 똑같이 따라 해보실 수 있는

참석자 1 1:36:50
여기까지인데 어쨌든 네 시간 조금 남긴 하지만은 여기까지 해가지고 구연도 하고 들어가면 엄청 또 시간 많이 걸리고 하니까 여기까지 하고 이 후로는 그냥 얘 보고 알아서 이제 계획대로 티켓 하나 하나씩 해결해 가면서 처리해줘.
그리고 코멘트에다가 인수 조건에 해당하는 에피댄스 꼭 붙여줘 그거 정도 하면 끝입니다.
그럼 혼자서 끝까지 다 짜낼 수 있습니다. 여러분들 직접 한번 해보시기 바랍니다.
네 라이브 페이버는 여기까지 했고요. 혹시 여기까지 해서 궁금하신 게 바로 해 주십시오.
표시해 주세요. 방송 수정합니다. 요 아직 표시가 안 됐으니까 그것도 이제 얘한테 가서

참석자 1 1:37:43
커밍 작업해달라고 하면 제가 네 여기까지 해야지 라 모르겠습니다.
질문 이제 받겠습니다.

참석자 1 1:37:54
포함된 저 쪽이라

참석자 1 1:38:04
클로드 코드를 이렇게 좀 계속 써보면서 메모리 쪽에 유저 전체 전용 플러프트도 혹시 좀 세팅을 해서 사용하고 계신가요?
그런 것들 좀 쓰는데 당연히 쓰죠. 유저 유저 그러니까 루트 폴더 유저 루트 폴더에다가 클로드 반 클로드로 만들어서 하는 거 있잖아요.
당연히 쓰죠. 예 좀 예시로 볼 만한 거 근데 일부러 안 넣고 있어요.
왜냐면은 다 보여드려야 되니까 그래서 가능하면은 그냥 여기서 사용하는 거 저는 제 프로피트는 거의 다 공개하고 싶은데 이거는 그냥 이 프로젝트에 필요한 만큼만 만들어서 쓴 거고 사실 그게 제 거 공개하는 게 별로 그렇게 의미가 없습니다.
제 리포지토리에 가서 보면은 제가 사용하는 거의 모든 규칙들은 다 올라가 있는 거 보실 수 있습니다.
그래요. 또 혹시 궁금하신 거

참석자 5 1:39:01
이 사람 거로 가면 돼 이거 봐 이 사람 때 리포즈 투입 될

참석자 1 1:39:06
네. 앞쪽에 잠깐만 다른 분들도 부르시면 좋으니까

참석자 7 1:39:18
네 라이브 코이 되게 흥미롭게 잘 봤는데요. 그러면은 제가 궁금한 게 온라인으로도 지금 강의의를 올려주셨는데 그 온라인에서는 이것들을 포함해서 좀 더 딥하게 가는 건지 아니면 또 다른

참석자 1 1:39:35
방향으로 가는 건지 좀 궁금합니다. 기본적으로는 이게 베이스이긴 하고요.
여기에 뭐 예를 들면은 컴플라이언스에 대한 부분들도 생각해야 되고 또 각종 자동화라든지 그리고 이것도 또 이제 다 여기서는 짧아가지고 말씀 못 드리지만은 사람이 리뷰하는 것들 중에 저희는 지금 저는 너무 간단한 것 만 드니까 리뷰가 생략돼 있잖아요.
리뷰가 제대로 안 되면은 얘가 엉터리 것들을 마구 쏟아냅니다.
그래서 그런 것들을 어떻게 잘 리뷰가 실질적으로 되게끔 할 건지 이제 그런 부분들도 다루고 해가지고 좀 더 이거보다는 훨씬 많은 내용들이 좀 포함돼 있다고 보시면 될 것 같고요.
이제 한비덴에 지금 올라와 있는 거는 한 제가 넉 달 전에 작업하던 방식이 지금 강의로 올라가 있어요.
근데 새로 찍어서 다시 업데이트할 예정이어서 현 시점에 제가 봤을 때 가장 잘 작동하는 지 하고 테크닉들을 사용을 해서 강의를 다시 지금 업데이트 이제 들어갈 예정입니다.

참석자 1 1:40:36
그거는 한 2년까지는 하나의 강의에 대해서 지속적으로 계속 업데이트를 진행을 할 예정이에요.
예 앞에 계신 분 저기 마이크 좀 뒤지고 가셔가지고

참석자 1 1:40:57
흥미롭지 않고요. 저희

참석자 8 1:40:59
저 같은 경우는 지금 강의 중에서도 이제

참석자 1 1:41:03
고랭이 그냥 제일 맞는 핏이 제일 많은 아이티와

참석자 8 1:41:06
추천해 주셨고 여기서 1번 가이드가 백핸드는 고로 대상을 걸로 되어 있더라고요.
네 회사에서 프로젝트마다 다를 수도 있겠지만 저희 같은 경우에는 백엔드 이제 종이 익숙하다 이런 경우 그런 데도 혹시 좀 더 팁이 있다거나 아니면 좀 더 잘 워킹할 수 있는 방법이 있으신지

참석자 1 1:41:27
그러니까 테스트나 빌드할 때 캐시 같은 거 옵션을 적용시킬 수 있을 거예요.
그런 것들을 최대한 활성화해서 쓰시는 걸 추천드립니다.
왜냐하면은 그 빌드하고 아까 제가 말씀드린 것처럼 후에다가 그걸 넣어놓고서 커밋 할 때마다 계속 돌잖아요.
그 시간이 은근히 길어요. 그래가지고 그걸 어떻게 단축시킬 수 있느냐가 포인트이긴 하고 개인적인 의견입니다마는 바이브 코딩 시대가 되면은 자바는 그렇게 선택받지 못할 확률이 크지 않을까 여러모로 너무 무겁게 그려가지고 네 그렇게 생각을 합니다.
네 또 혹시 질문 데모나 아니면 아까 강의나 등등등등 해가지고 질문 있으실까요?
네 한 분 또 자꾸 뒤로 안 가시고 그 자리에 계시면 될 것 같아요.

참석자 2 1:42:22
너무 재밌게 잘 봤고요. 제가 상상했던 거랑 너무 달라서 충격을 되게 많이

참석자 1 1:42:28
어떤 거가 다른 거예요. 저는 이제 보통 하나의 이슈를 해결하는 관점으로 접근을 했었고요.
지금 이제 프로젝트 전체의 관점으로 접근을 좀 해보다가 얘가 이상한 짓을 자꾸 해가지고 꾸드로 패다가 다시 하고 꾸드로 패다가 다시 했던 과정들이 있었는데 이렇게 접근할 수 있구나 알게 돼서 너무 좋았었고요.
제 질문은 지금 데모를 진행하는 데 실질적으로 토큰 비용이 얼마나 발생했는지가 대략적으로라도 궁금하고요.
네 그리고 또 한 가지는 지금 이슈가 8개 정도가 등록이 됐는데 그중에 1개 정도는 그냥 뒷 백그라운드를 실행을 한 되고 있는 모습을 좀 보면 어떨까 이거를 지금 돌려보시는 케이스가 일단은 토큰은 신경 안 쓰고 쓰고 있습니다.
저는 이제 맥스 플랜 쓰고 있어 가지고 맥스 플랜 안 쓰면은 토큰 비용 같은 것들 여기에 표시할 수 있거든요.
예를 들면은 어

참석자 5 1:43:20
넷플릭스로 만든 거야 30

참석자 1 1:43:23
호스트 같은 것 들르면은 여기에 원래 토큰 비용이 나오는데 저는 지금 맥스 서비스 키트를 쓰고 있어가지고 안 나오고요.
프로덕션 레벨로 쓰시면은 무조건 맥스 이상 쓰시는 거 추천을 드립니다.
그리고 그다음에 뭐 한번 돌려보라고 할까요?

참석자 1 1:43:55
백제의 의존성을 고려를 해가지고

참석자 1 1:44:09
그리고 그전에 요거 요거 전에 하나 해 뭐냐 하면은 제가 하나 중요한 건 빼먹었는데

참석자 1 1:44:32
트 조기 설정 이후에 기축 개선 비트 빌드 테스트가 자동으로

참석자 1 1:44:51
저이 좀 길이

참석자 1 1:44:57
프리커미 컴피티션 이렇게 설정해 이게 퍼스키라고 하는 회사입니다.

참석자 1 1:45:07
스키도 설정이죠

참석자 1 1:45:18
만들고 이슈의 등록 해줘

참석자 1 1:45:30
질문이 또 뭐 있어 네 된 것 같아요. 이거 하다 또 다른 분 혹시 네 저쪽에 마이크 요거 하면서 답변드릴게요.

참석자 9 1:45:46
아까 보여주셨던 이제 동영상에서 보면은 여러 개의 클로드를 동시에 띄워놓고 이제 작업을 하죠 이제 들어 있었고 실제로 이제 시트는 이제 다른 분들 쓰는 거 보니까 프론트 따로 백엔드 따로 이렇게 해서 영향을 쳐가지고 여기를 누른다고 하는데 제 경험상 사실 제과들이 프론트랑 약간 트레이가 다른 좀 다 섞여 있어서 하나를 이제 작동을 시키면은 여기서 쫙 업데이트를 쳐버리면은 다른 쪽에서 콘테스트를 다시 못 가져오니까 오류 생기거나 특히 재미 나이랑 같이 섞어서 쓰거나 하면은 그게 에러가 생길 것 같아서 저는 하나 두 개 이상 걸리기가 좀 어려운데 혹시 멀티플하게 돌릴 수 있을 정도의 어떤 메모리의 볼이라든가 그런 식의 이제 방법들이 따로 뭐가 있는지 아니면 그거를 잘 쪼개서 테스크를 나눠서 시켜야 되는 건지 이런 거에 대해서 좀 팁이 있으면 조금

참석자 1 1:46:37
그 부분은 사실 저도 이거 멀티플로 하는 거 몰라서 실제 제가 작업해서 아직은 사용하지 않고 있습니다.
안고 있고 이거 작업하시는 분들도 되게 실험적으로 쓰고 있는 건지 근데 생각해 보면은 클로드 코드 처음 나왔을 때부터 이 멀티로 동작하는 거를 클로드 코드가 코스키 올린 거 염두에 두고 만들었다는 걸 알 수가 있어요.
헤드리스 모드가 있다면 고 작업 컨테이너에서 따로 돌리는 거라든지 그다음에 이제 바이 패싱 모드 같은 것들 그러니까 사람의 허가를 필요로 하지 않는 모드 같은 것들을 갖다가 제공하는 것도 다 그런 거에 보면은 거기에 이제 연장선이라고 볼 수가 있습니다.
그래서 제일 좋은 그런 것들을 하기 위한 제일 이제 좋은 약간 교과서라고 할 수 있는 거는 클로드 코드 매뉴얼 보시면 돼요.
클로드 코드 매뉴얼하고 클로드 코드 베스트 프레티스라고 하는 걸로 검색해 보시면은 좀 한 장으로 그러니까 좀 길긴 한데 이제 요약된 문서가 하나 나오거든요.

참석자 1 1:47:40
그거 참고해서 작업하시는 걸 추천드리고 근데 굳이 멀티플로 하는 거에 막 얽매이실 필요는 없어요.
하나라도 끝까지 잘 해결할 수 있도록 하는 게 그게 되게 중요합니다.
출발

참석자 1 1:47:55
이렇게 됐고 이제

참석자 1 1:48:05
다가 혹시 문제가 생기면

참석자 1 1:48:13
릴렉시티 MCP로 조사해서 사람도 이제 구글 쓰는 거잖아요.
그거 똑같은 거예요. 이렇게 해서 이제 얘가 알아서 쭉쭉쭉쭉 구현을 해 나가기 시작할 겁니다.
이거 도는 동안 얘가 열심히 열일하는 동안 또 혹시 질문 있으실까요?
이제 한 10분 정도 남았는데

참석자 1 1:48:42
없으시면은 조금 일찍 마치도록 하겠습니다. 그러면은.


clovanote.naver.com